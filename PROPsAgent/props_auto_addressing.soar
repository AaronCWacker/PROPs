#####    Author: Bryan Stearns, 2018-2019
#   This code looks for addresses of instructed primitives on the topstate,
#   and automatically elaborates the pointers to those addresses if they can be found there.  
#
##        OPERATORS
#   (There are no operators. Addresses are elaborated in the background.)
#   
##        STRUCTURE
#  (<s> ^topstate <ts>                      | The topstate pointer, elaborated to all states
#       ^const <c>                          | The object containing task-specific literals for a delta, elaborated here once the delta is selected
#       ^<< props-epset props-cbset >> (<pe>                  | A set of instructed proposals, fetched from SMEM
#          [^delta (<d>                     | Corresponds to a proposable operator
#               ^const <dc>                 | If this exists, this delta is for a specific task-specific operator proposal.
#              [^prop (<prop>               | Corresponds to a single condition of the delta
#                   ^name <cname>           | The name of the primitive
#                   ^address1 <ts-attr1>    | A cached/provided attribute name from the topstate to find <id1>
#                   ^address2 <ts-attr2>)]  | A cached/provided attribute name from the topstate to find <id2>
#              [^cond-id1 (<dcid1>          | Generated: The result of finding the id referenced by <ts>.<ts-attr1>  (SEE: props_auto_addressing.soar)
#                   ^name <cname>           | The name of the condition prop that this address is for
#                   ^id1 <id1>)]            | The pointer to the specified address
#              [^cond-id2 (<dcid2>          | Generated: The result of finding the id referenced by <ts>.<ts-attr2>
#                   ^name <cname>           | The name of the condition prop that this address is for
#                   ^id2 <id2>)]            | The pointer to the specified address
#              [^missing <what>])]))        | Generated: Where <what> is << |id1| |id2| >>. Created if the id couldn't be found in WM.
#####


# SUPPLY CACHED ADDRESSES:

sp {elaborate*props*address1*buffer
    (state <s> ^<< props-epset props-cbset >> (^delta <d> )
               ^topstate.<buff> <buff-id>)
    (<d> ^prop <c>)
    (<c> ^address1 {<buff> <> RT <> Q <> smem <> flags}
         ^name <cname>)
-->
    (<d> ^cond-id1 <dcid>)
    (<dcid> ^name <cname>
            ^id1 <buff-id>)
}
sp {elaborate*props*address1*buffer*RT
    (state <s> ^<< props-epset props-cbset >> (^delta <d> )
               ^pre-action-state.<buff> <buff-id>)
    (<d> ^prop <c>)
    (<c> ^address1 {<buff> << RT Q smem flags >>}
         ^name <cname>)
-->
    (<d> ^cond-id1 <dcid>)
    (<dcid> ^name <cname>
            ^id1 <buff-id>)
}

sp {elaborate*props*address2*buffer
    (state <s> ^<< props-epset props-cbset >> (^delta <d> )
               ^topstate.<buff> <buff-id>)
    (<d> ^prop <c>)
    (<c> ^address2 {<buff> <> RT <> Q <> smem <> flags}
         ^name <cname>)
-->
    (<d> ^cond-id2 <dcid>)
    (<dcid> ^name <cname>
            ^id2 <buff-id>)
}
sp {elaborate*props*address2*buffer*RT
    (state <s> ^<< props-epset props-cbset >> (^delta <d> )
               ^pre-action-state.<buff> <buff-id>)
    (<d> ^prop <c>)
    (<c> ^address2 {<buff> << RT Q smem flags >>}
         ^name <cname>)
-->
    (<d> ^cond-id2 <dcid>)
    (<dcid> ^name <cname>
            ^id2 <buff-id>)
}
sp {elaborate*props*address2*cond-const
    (state <s> ^<< props-epset props-cbset >> (^delta <d> ) )
    (<d> ^const <dc>
         ^prop <c>)
    (<c> ^address2 |props$const|
         ^name <cname>)
-->
    (<d> ^cond-id2 <dcid>)
    (<dcid> ^name <cname>
            ^id2 <dc>)
}
sp {elaborate*props*address2*act-const
    (state <s> ^<< props-epset props-cbset >> <pe>
               ^const <dc>)
    (<pe> ^delta <d>)
    (<d> ^prop <c>)
    (<c> ^address2 |props$const|
         ^name <cname>)
-->
    (<d> ^cond-id2 <dcid>)
    (<dcid> ^name <cname>
            ^id2 <dc>)
}
sp {elaborate*props*address1*rootstate
    (state <s> ^<< props-epset props-cbset >> <pe>
               ^topstate <ts>)
    (<pe> ^delta <d>)
    (<d> ^prop <c>)
    (<c> ^address1 |props$rootstate|
         ^name <cname>)
-->
    (<d> ^cond-id1 <dcid>)
    (<dcid> ^name <cname>
            ^id1 <ts>)
}
sp {elaborate*props*address2*rootstate
    (state <s> ^<< props-epset props-cbset >> <pe>
               ^topstate <ts>)
    (<pe> ^delta <d> )
    (<d> ^prop <c>)
    (<c> ^address2 |props$rootstate|
         ^name <cname>)
-->
    (<d> ^cond-id2 <dcid>)
    (<dcid> ^name <cname>
            ^id2 <ts>)
}

sp {elaborate*props*address1*missing
    (state <s> ^<< props-epset props-cbset >> (^delta <d>  )
              -^topstate.<buff> <buff-id>)
    (<d> ^prop <c>)
    (<c> ^address1 {<buff> <> |props$rootstate|})
-->
    (<d> ^missing |id1|)
}
sp {elaborate*props*address2*missing*buffer
    (state <s> ^<< props-epset props-cbset >> (^delta <d>  )
              -^topstate.<buff> <buff-id>)
    (<d> ^prop <c>)
    (<c> ^address2 {<buff> <> |props$const| <> |props$rootstate|})
-->
    (<d> ^missing |id2|)
}
