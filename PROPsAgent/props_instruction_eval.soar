#####	Author: Bryan Stearns, 2016-2018
#   After instruction use is initialized, the instructions are evaluated.
#   These operators manage the semantics of evaluation.
#   The actual primitive operators that perform the instructions are in props_primitives.soar
#
##		OPERATORS
#	props-evaluate                          | Perform a propose - a bundle of props
#   props-do                                | Perform an individual prop
#   props-result-success                    | Return the results of these operations in a single decision cycle
#   props-result-fail                       | End instruction execution, and return to the fetch process to try again
#
##		PRIMARY STRUCTURES
#  (<s> ^name props-eval
#       ^rootstate <rs>                     | The pointer to the superstate that the learned rule should fire in
#       ^selected-instructions (<ins>          | The instructions corresponding to a single operator
#          [^prop-link (<prop>              | Pointer to the actual LTI-linked prop instruction element
#               ^name                       |
#               ^id1 <id1>                  | The first arg's id of the id:attr pair. Usually needs creation through addressing.
#               ^id2 <id2>                  | The second arg's id of the id:attr pair. Usually needs creation through addressing.
#               ^attr1 <attr1>              | The first arg's attr of the id:attr pair
#               ^attr2 <attr2>              | The second arg's attr of the id:attr pair
#              [^ops (<ops>                 | Info on an operator reference within the prop's args, such as for binary preference action
#                   ^op <op>                | The operator object being referenced
#                   ^op-target <opt>)]      | Either of << attr1 attr2 >>, for which arg this operator reference applies to
#               ^end-id1 <eid1>             | If an add action ...
#               ^buff-id2 <bid2>            |
#               ^buff-attr2 <battr2>        |
#               ^oldattr1 <oattr1>)] )      |
#       ^proposals (<ppls>                  | Info about proposals for evaluating instructions
#           ^cond-count <ccnt>              | The number of instructed conditions
#           ^act-count <acnt>               | The number of instructed actions
#           ^conds-counted <ccntd>          | The number of completed conditions
#           ^acts-counted <acntd>           | The number of completed actions
#           ^not-failed true                | A flag that is removed if a condition fails (testing failure thus tests a negation, and is not chunked)
#          [^propose (<ppl>                 | An individual propose structure (which will trigger an instance of a propose rule)
#               ^prop (<prop>               | Any number of props to be executed under this proposed operator
#                   ^name <pname>           | The string id of the prop
#                  [^prop-type <type>] )]   | Any number of attributes of this prop (condition, action, greater-than, etc.)
#              [^prop-type <type>]          | Either of << condition action >> copied from child props 
#               ^size <z>                   | The number of props under this propose
#               ^name <name>                | The string id of this propose 
#               ^original true)             | A flag that indicates this propose was created at the start of evaluation, or was selected and used during evaluation
#           ^complete true )                | A flag that indicates instruction evaluation has been successfully completed
#      [^prop-eval-data (<d>                | Info about instruction elements shared across proposes
#          ^prop <prop>                     | The same LTI-linked prop instruction object as above
#          ^status <status>                 | An indicator of whether and how this prop was evaluated 
#          ^count-delayed true              | A flag that controls timing of returning results
#          ^counted true)]                  | A flag that indicates this prop was counted in conds-counted or acts-counted
#       ^props-buffer (<bff>                | The collection of actions to be flushed to the rootstate at the end of instruction evaluation
#           ^action <prop>                  | A prop instruction element that describes the action ready to be flushed
#           ^object (<obj>                  | Info about an object root, when actions build an intermediate object structure before returning it at the end
#               ^id1 <id>                   | 
#               ^id1new <idnew>)            | Addresses a new object created during primitive_addressing, such that (<id> <attr> <val>) will be created based on any (<idnew> <attr> <val>)
#       ^props-flag staging                 | A flag that triggers buffered actions that build intermediate objects prior to flushing
#       ^props-flag flushing                | A flag that triggers the final flushing of buffered action by firing those action apply rules
#
#       ^operator (<o>
#           ^name props-evaluate
#           ^propose <ppl>                  | The single propose object that corresponds to this operator's proposal
#           ^combo-name <n>)                | A unique identifier for the combination history represented by this proposal
###
#  (<s> ^name props-do                      | The props-do state is an op no-change substate for performing the elements of the props-evaluate operator 
#       ^literalize <l>                     | A global literalization WME for backtracing, particularly for receiving literalization from the addressing substate
#
#       ^operator (<o>
#           ^name props-do
#           ^proposal <ppl>                 | The parent props-evaluate proposal
#           ^prop-eval-data <d>             | The evaluation data record for the prop being evaluated
#           ^prop <p> ) )                   | A *copy* of the <prop> referenced in the original instructions, modified in the substate
#####

# TRIGGER FAILURE RECOGNITION OF COLLECTIVE INSTRUCTION SET
sp {apply*props*collect-failure
    (state <s> ^prop-eval-data.status fail
               ^operator                          # TODO: Pick an operator or set of operators. Not o-support flag because of timing. 
               ^proposals (<p> ^not-failed true))
-->
    (<p> ^not-failed true -)
}

### OPERATOR ### 
# props-evaluate
##
# Perform a propose - a bundle of props
### 

# PROPOSE THE INSTRUCTED PROPOSALS
sp {propose*props*evaluate-sets
    (state <s> ^name props-eval
               ^props-flag originals-ready
               ^proposals <prps>)
    (<prps> ^propose <p>)
    (<p> ^size <contr>
         ^name <n>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name props-evaluate
         ^propose <p> 
         ^combo-name <n>)
}

# PREFER CONDITIONS OVER ACTIONS (IGNORING COMBOS OF BOTH)
sp {prefer*props*proposals*conditions
    (state <s> ^name props-eval
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name props-evaluate
          ^propose.prop-type condition)
    (<o2> ^name props-evaluate
          -^propose.prop-type condition)
-->
    (<s> ^operator <o1> > <o2>)
}
sp {prefer*props*proposals*higher-combos
    (state <s> ^name props-eval
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name props-evaluate
          ^propose (<i1> ^size <z1>
                      -^status) )
    (<o2> ^name props-evaluate
          ^propose (<i2> ^size < <z1>) ) # Don't test -^status so not affected by operators just evaluated
   -{(<i2> ^prop <p2>)
     (<i1> -^prop <p2>)}    # It is not the case that the smaller has any that are not in the larger
    
-->
    (<s> ^operator <o1> > <o2>)
}

# REJECT PROPOSALS THAT INCLUDE COMPLETED OPERATIONS
sp {worst*props*proposals*completed
    "Stop evaluating when the component props have been completed AND counted."
    (state <s> ^name props-eval
               ^quiescence t # Prevents annoying "Will not attempt to learn" messages
               ^operator <o1> )
    (<o1> ^name props-evaluate
          ^propose <its>)
    -{(<o1> ^propose.prop-eval-data <p>)
      (<p> -^counted )}
-->
    (<s> ^operator <o1> -)
}
sp {worst*props*proposals*completed-others
    "Retract non-selected proposals when any of their component props have been completed."
    (state <s> ^name props-eval
               ^quiescence t # Prevents annoying "Will not attempt to learn" messages
               ^operator <o1> 
               ^operator {<o2> <> <o1>} +)
    (<o1> ^name props-evaluate
          ^propose.status)
    (<o2> ^name props-evaluate
          ^propose.status)
-->
    (<s> ^operator <o2> -)
}

sp {worst*props*evaluate*failed
    (state <s> ^operator <o1> +
              -^proposals.not-failed true)
    (<o1> ^name props-evaluate)
-->
    (<s> ^operator <o1> <)
}


# APPLY BY COUNTING SUCCESS FOR EACH INSTRUCTED PROP (SUCCESS RETURNED FROM PROPS-DO)
# (The counting process is what allows backtracing to include the instructed conditions in the chunks.)
sp {apply*props*evaluate*result*success-count*conditions
    "Count successes sequentially, arbitrarily ordered by id"
    (state <s> ^operator <o>
               ^proposals (<ppls> ^conds-counted <cntd>) )
    (<o> ^name props-evaluate
         ^propose <props>)
    (<props> ^prop-eval-data <d1>)
    (<d1> ^prop (<p1> ^prop-type condition)
          ^status success
          ^count-delayed true
         -^counted true)
    -{(<props> ^prop-eval-data <d2>)
      (<d2> ^prop {<p2> < <p1>}
            ^status success
            ^count-delayed true
           -^counted true)} 
-->
    (<ppls> ^conds-counted <cntd> -
            ^conds-counted (+ 1 <cntd>))
    (<d1> ^counted true)
}
sp {apply*props*evaluate*result*success-count*actions
    "Count successes sequentially, arbitrarily ordered by id"
    (state <s> ^operator <o>
               ^proposals (<ppls> ^acts-counted <cntd>) )
    (<o> ^name props-evaluate
         ^propose <props>)
    (<props> ^prop-eval-data <d1>)
    (<d1> ^prop (<p1> ^prop-type action)
          ^status success
          ^count-delayed true
         -^counted true)
    -{(<props> ^prop-eval-data <d2>)
      (<d2> ^prop {<p2> < <p1>}
            ^status success
            ^count-delayed true
           -^counted true)} 
-->
    (<ppls> ^acts-counted <cntd> -
            ^acts-counted (+ 1 <cntd>))
    (<d1> ^counted true)
}

# NOTE WHEN EVALUATION IS ONGOING
#sp {elaborate*props*evaluating
#    "Note when evaluation is ongoing"
#    (state <s> ^name props-eval
#               ^operator <o1> +)
#    (<o1> ^name props-evaluate
#          ^propose ( ^prop-type condition
#                  -^status))
#-->
#    (<s> ^props-flag evaluating)
#}

# MANAGE THE ACTION BUFFER

#sp {elaborate*props*buffer*no-actions
#    "Mark when the return buffer has no actions to return"
#    (state <s> ^props-buffer <bff>)
#    (<bff> -^action)
#-->
#    (<bff> ^flag no-actions)
#}

# REMOVE REDUNDANT STAGED OBJECT ROOTS, SO INTERMEDIATE ACTIONS ONLY ATTACH TO ONE
sp {apply*props-evaluate*reduce-intermediates
    "If a chunk from addressing creates multiple staged objects for the same path, remove all but one."
    (state <s> ^operator.name props-evaluate
               ^props-buffer <pb>)
    (<pb> ^action <a1>
          ^object <o1>
          ^action {<a2> > <a1>}
          ^object {<o2> > <o1>})
    (<a1> ^id1 <id>
          ^attr1 <attr>)
    (<a2> ^id1 <id>
          ^attr1 <attr>)
    (<o1> ^id1 <id>
          ^id1new.<attr>)
    (<o2> ^id1 <id>
          ^id1new.<attr>)
-->
    (<pb> ^action <a2> -
          ^object <o2> -)
}



### OPERATOR ### 
# props-do
##
# Perform an individual prop.
# These are performed in an ONC substate for the props-evaluate operator.
# The instructed operations are carried out via props_primitives.soar, as part of the props-do operator.
# The rules below carry out the task-general management of that evaluation.
### 


# DEBUG PRINTING
sp {elaborate*props*print*prop-condition
    (state <s> ^operator <o>)
    (<o> ^propose.prop <ins>)
    (<ins> ^lti-name <name>
           ^prop-type condition
           ^prop-type {<type> << equality inequality type-equality type-inequality greater-than less-than greater-equal less-equal existence negation >>})
-->
    (write (crlf) | ***   EVALUATING | <type> | CONDITION PROP | <ins> |:| <name> | *** | )
}
sp {elaborate*props*print*prop-action
    (state <s> ^operator <o>)
    (<o> ^propose.prop <ins>)
    (<ins> ^lti-name <name>
           ^prop-type action)
-->
    (write (crlf) | ***   PERFORMING ACTION PROP | <ins> |:| <name> | *** | )
}




# INIT PROPS-DO SUBSTATE
sp {elaborate*props*do*state
    # If editing, also edit in props_learn_l2.soar
    (state <s> ^superstate <ss>)
    (<ss> ^operator (^name props-evaluate
                     ^propose.size <size>)
          ^rootstate <rs>)
-->
    (<s> ^name props-do
         ^literalize 0        # TODO: Is this still used?
         ^size <size>         # TODO: Is this still used?
         ^rootstate <rs>)
    #(force-learn <s>)        # ENABLE BY SOURCING props_learn_l2.soar
}

# PROPOSE EACH INSTRUCTED PROP OF THE PARENT PROPS-EVALUATE OPERATOR
sp {propose*props
    (state <s> ^superstate.operator <oo>)
    (<oo> ^name props-evaluate
          ^propose (<ppl> ^prop-eval-data <d>))
    (<d> ^prop (<prop> ^lti-name <name>)
        -^counted)
-->
    (<s> ^operator <o> + =)
    (<o> ^name props-do
         ^proposal <ppl>
         ^prop-eval-data <d>
         ^prop <pnew>)    # To be a copy of the prop LTM structure, which can be modified in the substate without affecting the original 
}
# COPY THE ORIGINAL LTI-LINKED PROP DATA TO THE NEW PROPOSAL-SPECIFIC STUCTURE THAT IS NOT IN THE SUPERSTATE
sp {elaborate*props*augmentations
    "Copy props augmentations. Use attr list so chunk isnt overgeneral."
    (state <s> ^operator <o1> +)
    (<o1> ^name props-do
          ^prop-eval-data.prop <prop>
          ^prop <pdo>)
    (<prop> ^{<attr> << id1 id2 attr1 attr2 lti-name prop-type sub1 sub2 sub1-link sub2-link >>} <val>)
-->
    (<pdo> ^<attr> <val>)
}


# COPY CHAIN ACTION META DATA ON PROPS-DO COMPLETION FROM PROP COPY TO ORIGINAL
sp {apply*props*do*buff-chain*copy
    (state <s> ^operator <o>
               ^superstate.props-buffer <bff>)
    (<o> ^name props-do
         ^prop <p>
         ^prop-eval-data.prop <prop>
         ^literalize)
    (<p> ^attr1 <attr1>
         ^attr2 <attr2>
         ^id1 <id1>
         ^id2 <id2>
         ^end-id1 <eid1>
         ^buff-id2 <bid2>
         ^buff-attr2 <battr2>
         ^oldattr1 <oattr1>)
    # For the case of returning an object rather than a single wme, condition the chunk on whether the object root has already been made:
    -{(<bff> ^action {<prp> <> <prop>})
      (<prp> ^buff-attr2 <battr2>)}
-->
    (<prop> ^end-id1 <eid1>
            ^buff-id2 <bid2>
            ^buff-attr2 <battr2>
            ^oldattr1 <oattr1>)
}

# MARK INTERMEDIATE BUFFERED ACTIONS THAT BUILD OBJECTS PRIOR TO WHEN THOSE OBJECTS ARE RETURNED AS SINGLE RESULTS
sp {apply*props*do*buff-chain*copy*intermediate-flag
    "Mark a buffered action prop as intermediate if it attaches a WME to a buffered object."
    (state <s> ^operator <o>
               ^superstate.props-buffer <bff>)
    (<o> ^name props-do
         ^prop <p>
         ^prop-eval-data.prop <prop>
         ^literalize)
    (<p> ^intermediate <inm>)
-->
    (<prop> ^intermediate <inm>)
}


# RETURN PROPS-DO EVALUATION RESULTS TO PROPS-EVALUATION
# Delay return from props-do success for two elab cycles, so spread-result can return.
sp {apply*props*do*return*status
    "Delayed return of prop success to the parent prop-eval-data structure." 
    (state <s> ^operator <o>)
    (<o> ^name props-do 
         ^prop <p>
         ^prop-eval-data <d>)
    (<p> ^status success)
-->
    (<d> ^status success)
}
sp {apply*props*do*return*status*count-delay
    "Extra elab cycle of delay before props-evaluate performs counting."
    (state <s> ^operator <o>)
    (<o> ^name props-do 
         ^prop-eval-data <d>)
    (<d> ^status success)
-->
    (<d> ^count-delayed true)
}

# Mark used proposals so that build-proposals can see what was selected.
sp {apply*props*do*return*status*success
    "After all proposal elements succeed, mark the proposal as usable for pairwise combination with other proposals."
    (state <s> ^operator <o>
               ^superstate.operator <oo>)
    (<o> ^name props-do
         ^proposal <ppl>)
    -{(<oo> ^propose.prop-eval-data <d>)
      (<d> -^status success)} # TODO: This should be redundant - <ppl> is the same as <oo>.propose. Shouldn't affect chunking?
-->
    #(<ppl> ^original true -)
    (<ppl> ^used true)
}
sp {apply*props*do*return*status*fail
    "If an evaluation fails, return the result and still mark the proposal as used."
    (state <s> ^operator <o>)
    (<o> ^name props-do 
         ^prop <p>
         ^proposal <ppl>
         ^prop-eval-data <d>)
    (<p> ^status fail)
-->
    (<d> ^status fail)
    #(<ppl> ^original true -)
    (<ppl> ^used true)
}

# Return props-do status results to the props-evaluation propose structure.
sp {elaborate*props*set*status
    "Give each prop propose structure the same status flags as possessed by any of its props"
    (state <s> ^name props-eval
               ^quiescence t # Prevents annoying "Will not attempt to learn" messages
               ^proposals.propose <p>)
    (<p> ^prop-eval-data <d>)
    (<d> ^status <status>)
-->
    (<p> ^status <status>)
}

# AUGMENT PROP OPERATORS WITH LITERALIZING VALUES APPROPRIATE TO THE ID:ATTR ARGUMENTS
# (This is sort of a hack: Backtracing through the int(arg) RHS function prevents the arg from being variablized in the chunk.) 
# (Incrementing each literalization with +1 ensures that the int result replaces the previous literalization and is backtraced through.)
sp {elaborate*props*do*literalize*1arg
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>))
    (<prop> ^attr1 <attr1>
           -^attr2 <attr2>
           -^sub1 
            ^lti-name <name>)
-->
    (<o> ^literalize (+ 1 (int <name>) (int <attr1>)) )
}
sp {elaborate*props*do*literalize*2arg
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>)
               ^superstate.const <c>)
    (<prop> ^attr1 <attr1>
           ^attr2 <attr2>
          -^id2 <c>
          -^<< sub1 sub2 >>
           ^lti-name <name> )
-->
    (<o> ^literalize (+ 1 (int <name>) (int <attr1>) (int <attr2>)) )
}
sp {elaborate*props*do*literalize*2arg*noconst    # A bit hacky, but literalization is a hack to start with
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>)
               ^superstate.const <c>)
    (<prop> ^attr1 <attr1>
           ^attr2 <attr2>
           ^id2 <c>
          -^<< sub1 sub2 >>
           ^lti-name <name> )
    -(<c> ^<attr2> <val>)
-->
    (<o> ^literalize (+ 1 (int <name>) (int <attr1>) (int <attr2>)) )
}
sp {elaborate*props*do*literalize*2arg*const # TODO: evaluate and remove any redundancies from this section
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>)
               ^superstate.const <c>)
    (<prop> ^attr1 <attr1>
            ^attr2 <attr2>
            ^id2 <c>
           -^<< sub1 sub2 >>
            ^lti-name <name> )
    (<c> ^<attr2> <val>)
-->
    (<o> ^literalize (+ 1 (int <name>) (int <attr1>) (int <attr2>) ))#(int <val>)) )
}
sp {elaborate*props*do*literalize*1arg*sub
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>))
    (<prop> ^attr1 <attr1>
           ^id1
          -^oldattr1 <oat1>
          -^attr2 <attr2>
           ^sub1
           ^lti-name <name> )
-->
    (<o> ^literalize (+ 1 (int <name>) (int <attr1>)) )
}
sp {elaborate*props*do*literalize*2arg*sub
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>))
    (<prop> ^attr1 <attr1>
           ^attr2 <attr2>
           ^id1
           ^id2
          -^oldattr1 <oat1>
          -^oldattr2 <oat2>
           ^<< sub1 sub2 >>
           ^lti-name <name> )
-->
    (<o> ^literalize (+ 1 (int <name>) (int <attr1>) (int <attr2>)) )
}
# TODO: are these sub*buf rules used anymore? I think so.
sp {elaborate*props*do*literalize*1arg*sub*buf
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>))
    (<prop> ^attr1 <attr1>
           ^id1
           ^oldattr1 <oat1>
          -^oldattr2 <attr2>
           ^sub1
           ^lti-name <name> )
-->
    (<o> ^literalize (+ 1 (int <name>) (int <oat1>) (int <attr1>)) )
}
sp {elaborate*props*do*literalize*2arg*sub*buf
    (state <s> ^operator (<o> ^name props-do
                              ^prop <prop>))
    (<prop> ^attr1 <attr1>
           ^attr2 <attr2>
           ^id1
           ^id2
           ^oldattr1 <oat1>
           ^oldattr2 <oat2>
           ^<< sub1 sub2 >>
           ^lti-name <name> )
-->
    (<o> ^literalize (+ 1 (int <name>) (int <oat1>) (int <oat2>) (int <attr1>) (int <attr2>)) )
}



### OPERATOR ### 
# props-result-success
##
# After a successfull props-evaluate, flush the action buffer to return to the rootstate.
### 

# RECOGNIZE THAT AN ENTIRE PROPOSE SET IS SUCCESSFULLY COMPLETED
sp {elaborate*props*complete
    (state <s>  ^name props-eval
                ^proposals <p> 
               -^props-flag apply-actions)
    (<p> ^cond-count <ccnt>
         ^conds-counted <ccnt>    # Backtracing through this line creates the lhs of the main chunk!
         ^act-count <pc>
         ^acts-counted >= <pc>)
-->
    (<p> ^complete true)
}

# IF THERE ARE INTERMEDIATE STRUCTURES, MARK THAT THEY NEED TO BE BUILT BEFORE THE FINAL FLUSH
sp {elaborate*props*result*staging
    (state <s> ^name props-eval
               ^props-buffer.action <prop>)
    (<prop> ^intermediate <any>
           -^staged success)
-->
    (<s> ^props-flag staging)
}

# PROPOSE THE FLUSH
sp {propose*props*result-success
    (state <s> ^proposals.complete true
               ^rootstate <rs>)
-->
    (<s> ^operator <o> + >)
    (<o> ^name props-result-success
         ^rootstate <rs>)
}

# BEGIN FLUSHING AFTER STAGING IS COMPLETE, ALSO AT LEAST AFTER ONE ELAB CYCLE OF BUFFER PREP
sp {apply*props*result-success*flush-buffer
    (state <s> ^operator.name props-result-success
              -^props-flag staging
               ^rootstate <rs>
               ^selected-instructions <ins>)
-->
    (<s> ^props-flag flushing)
    (write (crlf) | *** | <ins> | SUCCESS *** | (crlf) | | )
}

# CLEAN UP PROHIBITS ON SUCCESS - THE TASK STATE WILL CHANGE AND ALL INSTRUCTIONS ARE FAIR GAME AGAIN
sp {apply*props*success*search*end*unprohibit
    (state <s>  ^operator.name props-result-success
                ^prop-prohibits <pl>)
    (<pl> ^prohibit <prbt>)
-->
    (<pl> ^prohibit <prbt> -)
}


# MODIFY AN ACTION THAT REFERENCES A CHAIN OF CREATED WMES SO IT ADDS THE CHAIN RATHER THAN THE END OF THE CHAIN
sp {apply*props*success*buffer*fill*partial*result
    (state <s> ^operator.name props-result-success
               ^props-buffer <bff>)
    (<bff> ^action <a>)
    (<a> ^end-id1 <eid1>
         ^oldattr1 <oattr1>
         ^buff-id2 <bid2>
         ^buff-attr2 <battr2>
         ^id2 <id2>
         ^attr2 <oattr2>)
    (<id2> ^<oattr2> <val>)
-->
    # Copy the found arg2 item to the end of the arg1 chain, then replace arg2 with the chain
    (<eid1> ^<oattr1> <val>)
    (<a> ^end-id1 <eid1> -
         ^buff-id2 <bid2> -
         ^buff-attr2 <battr2> -
         ^id2 <id2> -
         ^id2 <bid2>
         ^attr1 <oattr1> -
         ^attr1 <battr2>
         ^attr2 <oattr2> -
         ^attr2 <battr2>
         ^oldattr2 <oattr2>)
}

# COPY THE ACTIONS TO THE OPERATOR AND LITERALIZE THE ACTION APPLICATIONS
# (The copy was originally to bypass an old kernel bug that has since been fixed, but it doesn't hurt, except maybe efficiency.)
sp {elaborate*props*success*apply*literalize*1arg
    (state <s> ^operator <o> +
               ^props-buffer <bff>)
    (<o> ^name props-result-success)
    (<bff> ^action <ins>)
    (<ins> ^attr1 <attr1>
           ^id1 <id1>
          -^attr2 <attr2>
           ^lti-name <name>)
-->
    (<o> ^item <i>)
    (<i> ^action <ins>
         ^attr1 <attr1>
         ^id1 <id1>
         ^literalize (+ 1 (int <attr1> ) (int <name>)) )
}
sp {elaborate*props*success*apply*literalize*2arg
    (state <s> ^operator <o> +
               ^props-buffer <bff>)
    (<o> ^name props-result-success)
    (<bff> ^action <ins>)
    (<ins> ^attr1 <attr1>
           ^attr2 <attr2>
           ^id1 <id1>
           ^id2 <id2> 
           ^lti-name <name>)
   -{(<ins> ^oldattr1
           -^oldattr2)}        # If this is an intermediate structure-build action, wait to literalize until id is set in fill-partial-result
-->
    (<o> ^item <i>)
    (<i> ^action <ins>
         ^id1 <id1>
         ^id2 <id2>
         ^attr1 <attr1>
         ^attr2 <attr2>
         ^literalize (+ 1 (int <attr1>) (int <attr2>) (int <name>)) )
}
# COPY ANY USED OPERATOR STRUCTURES TO THE COPIED ACTION
sp {elaborate*props*success*apply*ground*ids*ops
    (state <s> ^operator <o> +
               ^props-buffer <bff>)
    (<o> ^name props-result-success
         ^item <i>)
    (<i> ^action <ins>)
    (<bff> ^action <ins>)
    (<ins>  ^ops <ops>)
-->
    (<i> ^ops <ops>)
}

# IF AN ACTION ADDS STRUCTURE TO AN OPERATOR CREATED BY ANOTHER ACTION, MAKE THE ACTION PART OF THE OPERATOR PROPOSAL
sp {apply*props*success*clean*buffer*op*convert
    "Convert add actions to proposals if they involve a new operator"
    (state <s> ^operator.name props-result-success
               ^props-buffer <bff>)
    (<bff> ^action <a>)
    (<a> ^attr1 operator
        -^buff-id2
         ^id2 <id2>
         ^attr2 operator)
    (<id2> ^operator <onew>
           ^{<other> <> operator} <val>)
-->
    (<a> ^ops <ops>)
    (<ops> ^op <onew>
           ^op-target attr1)
    (<onew> ^<other> <val>)
}
# UNIFY ALL ACTIONS' OP REFERENCES WHICH SHARE NAMES UNDER/ONTO THE OPS' PROPOSAL ACTIONS
sp {apply*props*success*clean*buffer*op*transfer
    "If two actions involve the same operator, mirror their copies of that operator."
    (state <s> ^operator.name props-result-success
               ^props-buffer <bff>)
    (<bff> ^action <a1>
           ^action {<a2> <> <a1>})
    (<a1> ^prop-type << acceptable indifferent better worse require >>
          ^ops.op <op1>)
    (<op1> ^name <name>)
    (<a2> ^ops.op <op2>)
    (<op2> ^name <name>
           ^{<attr> <> name} <val>)
-->
    (<op1> ^<attr> <val>)
}



### OPERATOR ### 
# props-result-fail
##
# After a failed props-evaluate, clear the eval structures and fetch a different set of instructions, and try again.
### 

sp {propose*props*result-fail
    (state <s> ^superstate <ss>
               ^proposals <p>
               ^selected-instructions <ins>)
     (<p> ^cond-count
         -^not-failed)
-->
    (<s> ^operator <o> + >)
    (<o> ^name props-result-fail
         ^ins <ins>)
}
sp {apply*props*result-fail     # Gives prohibit store a change to carry through
    (state <s> ^operator <o>
               ^prop-prohibits <pp>
			   ^props-flag dont-reset
               ^selected-instructions <ins>)
    (<o> ^name props-result-fail
         ^ins <ins>)
    (<ins> ^name <name>)
-->
    #(<s> ^props-fetch-reset fail*search*prohibit)
	(<s> ^props-flag dont-reset -)
    (<pp> ^prohibit <ins> )
    (write (crlf) | *** RETRACTING | <name> | *** | (crlf) | | )
}



