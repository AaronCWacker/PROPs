### SOURCE THIS TO TURN ON CHUNKING FOR SUB CHAIN RESULTS ###
# (source it after first sourcing props_primitive_addressing.soar)
# (Note this is only intended to be used for collecting addressing chunks as sourcing material.
#  Chunks for addressing are otherwise the first step of l2 chunking.)

sp {apply*props*sub*chain*iterate*ops
    (state <s>  ^operator <o>)
    (<o> ^name props-sub-chain-iterate
         ^sym <sym>
         ^literalize <l>
         ^ops-id <op>
         ^ops-attr <attr>
         ^ops-val <val>
         ^ops-target <idn>)    # << attr1 attr2 >>
-->
    (<sym> ^ops <ops>)    # May make messy duplicates, but functional. (For case of better/worse: s.op1 > s.op2)
    (<ops> ^op <op> 
           ^op-target <idn>)
    (<op> ^<attr> <val>)
	(force-learn <s>)			# Might learn failures too, but if reaching this point, not likely
}
sp {apply*props*sub*chain*iterate*buff
    (state <s>  ^operator <o>
                ^evalstate.props-buffer <eb>)
   -{(<eb> ^object <on>)
     (<on> ^id1 <id1> ^id1new.<attr> )} # Don't let the chunk made redundant structures
    (<o> ^name props-sub-chain-iterate
         ^rootstate <rs>
         ^sub <sub>
         ^sym <sym>
         ^buff-id1 <id1>
         ^buff-id2 <id2>
         ^buff-attr <attr>
         ^buff-val2 <val>)
-->
    (<sub> ^buff-chaining <new-inst>)
    (<new-inst> ^id1 <val>)       # The rest will be created later
    (<sym> ^intermediate true)    # Refers to the rest of the chain, not the new add-object prop created here
    (<eb> ^object <new>     # Create the head of the chain (new object) on the action buffer for shared use with other PROPs
          ^action <prop>)   # Create a new action for adding this object!
    (<new> ^id1 <id1>
           ^id1new <id2>)   # The placeholder for id1 that gets the chain built onto it
    (<id2> ^<attr> <val>)
    (<prop> ^id1 <id1> ^attr1 <attr> ^id2 <id2> ^attr2 <attr>
            ^prop-type action ^prop-type add 
            ^lti-name (make-constant-symbol |!|)) # TODO: Is name actually needed? If so, mcs function not guaranteed unique.
    (force-learn <s>)
}
sp {apply*props*sub*return*result
	(state <s>	^operator <o>
				^name sub-props
                ^props-sub <u>
                ^literalize <sl>)
    (<o> ^name props-sub-return-result
         ^literalize <l>
         ^sub <sub>
         ^sym <sym>)
	(<sub>	^curr-id <res>
			^target-arg <arg>
			^curr-attr <attr>
           -^buff-chaining)
-->
	(<sym> ^<arg> <res>)
	(<sub> ^curr-attr <attr> -)	# Reset for next time, if this symbol lingers
    (<s> ^props-sub <u> -
		 ^name sub-props -      # End sub props evaluation
         ^literalize <sl> -)
	(force-learn <s>)
}

# MARK THAT SHARED OBJECT MEMORY REFERENCES NEED TO BE MADE PRIOR TO FINAL PROPS RETURN
sp {apply*props*sub*chain*iterate*transferred
    (state <s>  ^operator <o>)
    (<o> ^name props-sub-chain-iterate
         ^note transfer-chain
         ^sym <sym>)
-->
    (<sym> ^intermediate true)
	(force-learn <s>)
}
