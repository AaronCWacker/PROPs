#####	Author: Bryan Stearns, 2016-2018
#   After instructions are fetched and selected, begin execution by 
#   creating the semantic structures needed for processing them.
#
##		OPERATORS
#	props-init-evaluation
#
##      PRIMARY STRUCTURES
#  (<s> ^name props-eval
#       ^selected-instructions (<ins>       | The declarative instructions corresponding to a rule that will be practiced
#           ^prop-link <prop>)              | Pointer to the actual LTI-linked prop instruction element
#       ^proposals (<ppls>                  | Info about proposals for evaluating instructions
#           ^cond-count <ccnt>              | The number of instructed conditions
#           ^act-count <acnt>               | The number of instructed actions
#           ^conds-counted <ccntd>          | The number of completed conditions
#           ^acts-counted <acntd>           | The number of completed actions
#           ^not-failed true                | A flag that is removed if a condition fails (testing failure thus tests a negation, and is not chunked)
#          [^propose (<p1>                  | An individual propose structure (which will trigger an instance of a propose rule)
#              [^prop (<prop>               | Any number of props to be executed under this proposed operator
#                   ^name <pname>           | The string id of the prop
#                  [^prop-type <type>] )]   | Any number of attributes of this prop (condition, action, greater-than, etc.)
#               ^size <z>                   | The number of props under this propose
#               ^name <name>                | The string id of this propose 
#               ^original true              | A flag that indicates this propose was created at the start of evaluation, rather than constructed/learned afterwards
#              [^source <p2>] )]            | One of two pointers to other proposes used to create this propose. (Proposes are learned through pair-wise combination.)
#       ^props-flag originals-ready         | A flag that indicates initial proposes have finished cascaded creation
#      [^prop-eval-data (<d>                | Info about instruction elements shared across proposes
#          ^prop <prop>)] )                 | The same LTI-linked prop instruction object as above
#####


### OPERATOR ### 
# props-init-evaluation 
##
# Setup the structures needed for instruction evaluation.
### 

sp {propose*props*init-evaluation
    (state <s> ^name props-eval
              -^props-flag originals-ready
               ^proposals <p>
               ^props-flag fetched-enough
               ^props-instructions <ins>)
    (<ins> ^lti-name <id>
           ^cond-count )
-->
    (<s> ^operator <o> + )
    (<o> ^name props-init-evaluation
         ^props-instructions <ins>)
}
sp {apply*props*init-evaluation
    (state <s> ^operator <o>
               ^proposals <ppls>)
    (<o> ^name props-init-evaluation
         ^props-instructions <lti>)
    (<lti> ^name <name>
           ^cond-count <ccnt>
           ^act-count <acnt>)
-->
    (<s> ^selected-instructions <lti>
         ^props-buffer <bff>
         ^literalize 0)
    (<ppls> ^cond-count <ccnt>
            ^act-count <acnt>
            ^conds-counted 0
            ^acts-counted 0
            ^not-failed true)    # If this is removed, the instruction fails and is prohibited (so doesn't backtrace through local negation)
    (write (crlf) | *** RUNNING INSTRUCTIONS | <lti> | :  (| <name> |) ***| )
}

# META - REJECT RULES CURRENTLY ACTIVE
sp {apply*props*init-evaluation*reject-used
    (state <s> ^operator <o>
               ^proposals <p>
               ^rootstate <rs>)
    (<o> ^name props-init-evaluation
         ^props-instructions <ins>)
    (<ins> ^name <name>)
    (<rs> ^props-active-rule <name>)
    (<p> ^not-failed true)
-->
    (<p> ^not-failed true -)
    (write (crlf) |     RULE | <name> | ALREADY IN USE| )
}

sp {apply*props*init-evaluation*originals-ready
    "Wait one elab cycle before ending to allow reject-used to apply"
    (state <s> ^operator.name props-init-evaluation
               ^props-buffer)
-->
    (<s> ^props-flag originals-ready)
}

# BUILD SEMANTIC KNOWLEDGE OF PRIMITIVE PROPOSALS
sp {elaborate*props*instruction*receive*parse
    #"Parse instructions into the form that will be turned into a proposal."
    "Start the PROP proposal structures for selected instructions"
    (state <s> #^operator.name props-init-evaluation
               ^proposals <ppls>
               ^selected-instructions <ins>)
    (<ins> ^prop-link (<prop> ^lti-name <name>))
    #(<ppls> -^propose.prop <prop> )
-->
    (<ppls> ^propose <p>)
    (<p> ^prop <prop>
         ^size 1
         ^name <name>)
}

sp {apply*props*init-evaluation*type-indifferent
    (state <s> ^operator <o>)
    (<o> ^name props-init-evaluation
         ^props-instructions.prop-link <p>)
    (<p> ^prop-type add
           ^attr1
          -^attr2)
-->
    (<p> ^prop-type indifferent)
}

# REPLACE INSTRUCTION KEYWORDS WITH APPROPRIATELY-LINKED STRUCTURES
sp {apply*props*init-evaluation*substitute*rootstate
    "Substitute rootstate ID"
    (state <s> ^operator <o>
               ^rootstate <rs>)
    (<o> ^name props-init-evaluation
         ^props-instructions.prop-link <p>)
    (<p>  ^<something> props$rootstate)
-->
    (<p>  ^<something> props$rootstate -
          ^<something> <rs>)
}
sp {apply*props*init-evaluation*substitute*sub-rootstate
    "Substitute subs rootstate ID"
    (state <s> ^operator <o>
               ^rootstate <rs>)
    (<o> ^name props-init-evaluation
         ^props-instructions.prop-link <p>)
    (<p>  ^<< sub1-link sub2-link >> <sub>)
    (<sub> ^<something> props$rootstate)
-->
    (<sub> ^<something> props$rootstate -
           ^<something> <rs>)
}
sp {apply*props*init-evaluation*substitute*const
    "Substitute const ID"
    (state <s> ^operator <o>)
    (<o> ^name props-init-evaluation
         ^props-instructions <ins>)
    (<ins> ^const <c>
           ^prop-link <p>)
    (<p>  ^<something> props$const)
-->
    (<p>  ^<something> props$const -
          ^<something> <c>)
}

# MARKING AS ORIGINAL ALLOWS KNOWN COMBOS TO CONTINUE CASCADING WITHIN THIS SINGLE APPLICATION ##
#sp {apply*props*init-evaluation*propose-known
#    "Mark the proposals that are known before any combos are made this round."
#    (state <s> ^superstate <ss>
#               ^quiescence t) # So there will be no chunk
#    (<ss> ^operator.name props-init-evaluation
#          ^proposals.propose <p>)
#-->
#    (<p> ^original true)
#}
#
#sp {elaborate*props*init-evaluation*originals-ready
#    (state <s> ^superstate <ss>
#               ^quiescence t)
#    (<ss> ^operator.name props-init-evaluation)
#-->
#    (<ss> ^props-flag originals-ready)
#}
#sp {apply*props*init-evaluation*propose-known
#    "Mark the proposals that are known before any combos are made this round."
#    (state <s> ^operator.name props-init-evaluation
#               ^proposals.propose <p>)
#-->
#    (<p> ^original true)
#}



sp {elaborate*props*source-proposal-items
    (state <s> #^operator.name props-init-evaluation
               ^proposals.propose <p>)
    (<p> ^source.prop <prop>)
-->
    (<p> ^prop <prop>)
}
sp {elaborate*props*proposals*condact-type
    (state <s> #^operator.name props-init-evaluation
               ^proposals.propose <p>)
    (<p> ^prop.prop-type {<type> << condition action >>})
-->
    (<p> ^prop-type <type>)
}

### END OPERATOR props-init-evaluation ###


### ELABORATIONS ###
# For extra info about instruction elements
###

# TODO: Most elabs could be provided in instructions
# TODO: Could make init applies instead of elaborations

sp {elaborate*props*type*indifferent
    (state <s> ^name props-eval
               ^props-instructions.prop-link <prop>)
    (<prop> ^prop-type add
            ^attr1 
           -^attr2)
-->
    (<prop> ^prop-type indifferent)
}
sp {elaborate*props*type*best
    (state <s> ^name props-eval
               ^props-instructions.prop-link <prop>)
    (<prop> ^prop-type better
            ^attr1 
           -^attr2)
-->
    (<prop> ^prop-type best)
}
sp {elaborate*props*type*worst
    (state <s> ^name props-eval
               ^props-instructions.prop-link <prop>)
    (<prop> ^prop-type worse
            ^attr1 
           -^attr2)
-->
    (<prop> ^prop-type worst)
}
sp {elaborate*props*type*condition
    (state <s> ^name props-eval
               ^props-instructions.prop-link <prop>)
    (<prop> ^prop-type << equality inequality type-equality less-than greater-than less-equal greater-equal negation existence >>)
-->
    (<prop> ^prop-type condition)
}
sp {elaborate*props*sub*class*proposal
    (state <s> ^name props-eval
               ^props-instructions.prop-link <prop> )
    (<prop> ^prop-type << acceptable indifferent better worse best worst require >> ) #TODO: Originally didn't include best/worst. Bug or intentional?
-->
    (<prop> ^prop-type proposal )
}
sp {elaborate*props*type*action
    (state <s> ^name props-eval
               ^props-instructions.prop-link <prop>)
    (<prop> ^prop-type << add remove acceptable indifferent better worse best worst require >>)
-->
    (<prop> ^prop-type action)
}


# INFER THE TARGET/NON-TARGET ELEMENTS
# (This is blatantly lazily making up for data that should have been in the instructions originally.
#  namely, which prop argument (1 or 2) a memory addressing routine is supposed to fill.
#  Arguments are id:attr pairs, and instructions only provide the id info.)
sp {elaborate*props*sub*target*attr2
    (state <s1> ^name props-eval
                ^props-instructions.prop-link.<< sub1-link sub2-link >> <sub>)
    (<sub> ^target-arg id1)
-->
    (<sub>  ^target-attr attr1)
}
sp {elaborate*props*sub*target*attr1
    (state <s1> ^name props-eval
                ^props-instructions.prop-link.<< sub1-link sub2-link >> <sub>)
    (<sub> ^target-arg id2)
-->
    (<sub>  ^target-attr attr2)
}

# ELABORATE PROP STATUS STRUCTURES
sp {elaborate*props*eval-data
    "Make a global container for prop-related eval data (success/fail/etc)"
    (state <s> ^name props-eval
               ^selected-instructions.prop-link <prop>)
-->
    (<s> ^prop-eval-data <d>)
    (<d> ^prop <prop>)
}
sp {elaborate*props*eval-data*proposes
    "Give each propose structure pointers to the prop-eval-data that go with its props."
    (state <s> ^name props-eval
               ^proposals.propose <p>
               ^prop-eval-data <d>)
    (<p> ^prop <prop>)
    (<d> ^prop <prop>)
-->
    (<p> ^prop-eval-data <d>)
}
