(add-instr stroop :input (Vobject Vcolor Vword) :working-memory (WMconcept WMcolor WMword)
	;~ focus-color
	(ins :condition (Vcolor != nil) :subgoal "elab-Vcolor-WMcolor" :description "Get the color from the object.")
	;~ focus-WMcolor
	(ins :condition (WMcolor != nil) :subgoal "elab-WMcolor-WMword" :description "Get the word from the color.")
	;~ focus-word
	(ins :condition (Vword != nil) :subgoal "elab-Vword-WMword" :description "Get the word from the text.")

	;~ say-word
	(ins :condition (WMword != nil) :action ((say WMword) -> AC) :description "Say the word")
	;~ finish
	(ins :condition (Vobject = last) :action (finish -> Gtask) :description "Done with this block")
	
	;; Imagination
	;~ imagine-color
	(ins :condition (Vobject != yes) :subgoal "elab-Vcolor-WMcolor" :description "Load the elab in preparation for percept.")
	;~ imagine-wander
	(ins :condition (Vobject != yes) :action (idle -> Gtask) :description "Switch contexts as if mind-wandering.")
	;~ imagine-idle
	(ins :condition (Vobject != yes) :subgoal "idle" :description "Truly do nothing.")

	;; Elaborations
	(elab elab-Vcolor-WMcolor 
		;~ general
		(ins :condition (Vcolor <> nil) :action (Vcolor -> WMcolor))  ;; This happens to be generic for all sub-elabs.
	)
	(elab elab-WMcolor-WMword
		;~ general
		(ins :condition (WMcolor <> nil) :action (WMcolor -> WMword))  ;; This happens to be generic for all sub-elabs.
	)
	(elab elab-Vword-WMword
		;~ general
		(ins :condition (Vword <> nil) :action (Vword -> WMword))  ;; This happens to be generic for all sub-elabs.
	)

)

(add-instr idle :input (Vobject Vcolor Vword) )
	;~ wait
	(ins :condition (Vtask = verbal-CWM Vobject <> pending) :action (verbal-CWM -> Gtask) :description "Return to the vcwm context.")

	;~ return-stroop
	(ins :condition (Vtask = stroop Vobject <> nil) :action (stroop -> Gtask) :description "Return to Stroop context.")
)


