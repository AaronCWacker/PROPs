#####	Author: Bryan Stearns, 2018
# Manage a buffer system in Soar working memory similar to Actransfer's, allowing use of PRIMs instructions
# Working memory has:
# <s> 	^G				# Goal buffer
#			^Gtask		#   If set to "finish", then reset the buffers
#			^clear-rt	#   If this exists, then clear the RT buffer results
#		^WM				# Working memory buffer
#			^slot[1,2,3,...]
#		^NW				# NewWM buffer
#			^wm			#   An individual newwm command (a new declarative 'chunk' to replace current WM contents)
#		^Q				# Query buffer
#			^query		#   An individual query command for smem
#			^wm-query	#   A query for an past declarative WM 'chunk' (object), still stored in working memory within the pointer network
#			^retrieve	#   A retrieve command for a specific WM 'chunk' (object), still stored in working memory
#		^RT				# Where Q results are placed
#		^AC				# The action buffer
#			^action		#   An individual action command
#		^V				# The input (visual) buffer
#			^Vlabel
#			^Vvalue
#####

smem --set learning on

# CHUNK SINGLETON COMMANDS ARE ESSENTIAL TO PREVENT CHUNKS MATCHING SEVERAL TIMES
chunk singleton state G identifier
chunk singleton state V identifier
chunk singleton state WM identifier
chunk singleton identifier slot1 identifier
chunk singleton identifier slot2 identifier
chunk singleton identifier slot3 identifier
chunk singleton identifier slot4 identifier
chunk singleton identifier slot1 constant
chunk singleton identifier slot2 constant
chunk singleton identifier slot3 constant
chunk singleton identifier slot4 constant
chunk singleton state NW identifier
chunk singleton state RT identifier
chunk singleton state Q identifier
chunk singleton state AC identifier
chunk singleton state flags identifier
chunk singleton identifier props-agnostic-add constant


# Buffer Init #
sp {lib*actr*propose*init
	(state <s> ^superstate nil
				-^WM)
-->
	(<s> ^operator <o> + >)
	(<o> ^name buffer-init)
}
sp {lib*actr*apply*init
	(state <s> ^operator.name buffer-init
				#^smem.command <scmd>
				^io.output-link <ol>)
-->
	(<s> 	^G <g>		# control
			^V <v>		# input
			^WM <w>		# variables
			^NW <n>		# newWM
			^RT <r>		# retrieval results
			^Q <q>		# retrieval queries
			^AC <a>		# actions
			^flags <f>)	# meta commands for 'architectural' processes
	(<a> ^props-agnostic-add true)	# Learned actions which add to AC don't test for or replace existing values
	(<q> ^props-agnostic-add true)
	(<n> ^props-agnostic-add true)
	(<f> ^props-agnostic-add true)
	(write (crlf) INITTED (crlf))
}

# FINISH #
# Custom for Soar - don't include as a PROP instruction set #
sp {lib*actr*propose*finish
	(state <s> ^G.Gtask finish)
-->
	(<s> ^operator <o> + >)
	(<o> ^name actransfer-finish)
}
sp {lib*actr*apply*finish
	(state <s> ^operator.name actransfer-finish
				^G <g>
				^WM <w>
				^AC <a>
				^RT <r>
				^flags <f>)
-->
	# Reset buffers
	(<s> ^G <g> -
		^G <g2> 
		^WM <w> -
		^WM <w2>
		^RT <r> -	# FIXME: This wasn't reset before, why?
		^RT <r2>
		^AC <a> -
		^AC <a2>
		^flags <f> -
		^flags <f2>)
	(<a2> ^props-agnostic-add true)
	(<f2> ^props-agnostic-add true)
	# Prompt to reset manual sequence
	(<s> ^props-flag reset-manual-sequence)
	(write (crlf) (crlf) |*** TASK FINISHED ***| (crlf) )
}


sp {lib*actr*elaborate*finish
	(state <s> ^G.Gtask finish
				^io.output-link <ol>)
-->
	# Proclaim finitude
	(<ol> ^finish <f>)
	(<f> ^finish true)
}

#### SWITCH TO SECONDARY BEHAVIOR IN CASE OF LACK OF PROPS INSTRUCTIONS ####
# (IN THIS CASE, HALTING)
sp {lib*actr*instruction*search*impasse
	(state <s>	^WM 
				^props-flag impasse)
-->
	(write |    Well, well, well. I see I've run out of instructions. Goodnight.| (crlf) )
	(halt)
}


#### TASK-SPECIFIC: TRANSFER INPUT TO VISUAL ####
sp {lib*actr*elaborate*visual*in
	(state <s> ^V <v>
				^io.input-link <il>)
	(<il> ^<attr> <val>)
-->
	(<v> ^<attr> <val>)
	#(write |* Loading V.| <attr> | | <val> |  | )
}
sp {lib*actr*elaborate*visual*debug*in-2
	(state <s> ^V <v>
				^io.input-link <il>)
	(<il> ^slot1 <i1>
		^slot2 <i2>
		-^slot3)
-->
	#(<v> ^Vlabel <i1>
	#	^Vvalue <i2>)
	(write (crlf) |Read: "| <i1> |" "| <i2> |"|)
}
sp {lib*actr*elaborate*visual*debug*in-3
	(state <s> ^V <v>
				^io.input-link <il>)
	(<il> ^slot1 <i1>
		^slot2 <i2>
		^slot3 <i3>
		-^slot4 )
-->
	(write (crlf) |Read: "| <i1> |" "| <i2> |" "| <i3> |"|)
}
sp {lib*actr*elaborate*visual*debug*in-4
	(state <s> ^V <v>
				^io.input-link <il>)
	(<il> ^slot1 <i1>
		^slot2 <i2>
		^slot3 <i3>
		^slot4 <i4>)
-->
	(write (crlf) |Read: "| <i1> |" "| <i2> |" "| <i3> |" "| <i4> |"|)
}


# TRANSFER INPUT TO TASK SPECIFICATION
sp {lib*actr*elaborate*input*task
	(state <s> ^io.input-link <il>
			   ^G <g>)
	(<il> ^task <task>)
	(<g> -^Gtask finish)
-->
	(<g> ^Gtask <task>)
	(write (crlf) |*** TASK SET TO | <task> | ***| )
}

# DEBUG PRINT OUTPUT: Assuming action slots follow certain format
sp {lib*actr*elaborate*action*output-1
	(state <s> ^AC.action <a>
				^io.output-link <ol>)
	(<a> ^slot1 <o1>
		-^slot2 <o2>)
-->
	(<ol> ^say <a>)
	(write (crlf) |Say: | <o1> (crlf) )
}
sp {lib*actr*elaborate*action*output-2
	(state <s> ^AC.action <a>
				^io.output-link <ol>)
	(<a> ^slot1 <o1>
		^slot2 <o2>
		-^slot3)
-->
	(<ol> ^say <a>)
	(write (crlf) |Say: | <o1> | | <o2> (crlf) )
}
sp {lib*actr*elaborate*action*output-3
	(state <s> ^AC.action <a>
				^io.output-link <ol>)
	(<a> ^slot1 <o1>
		^slot2 <o2>
		^slot3 <o3>
		-^slot4)
-->
	(<ol> ^say <a>)
	(write (crlf) |Say: | <o1> | | <o2> | | <o3> (crlf) )
}
sp {lib*actr*elaborate*action*output-4
	(state <s> ^AC.action <a>
				^io.output-link <ol>)
	(<a> ^slot1 <o1>
		^slot2 <o2>
		^slot3 <o3>
		^slot4 <o4>)
-->
	(<ol> ^say <a>)
	(write (crlf) |Say: | <o1> | | <o2> | | <o3> | | <o4> (crlf) )
}


sp {lib*actr*set*clean*output
	:o-support
	(state <s> ^io.output-link <ol>
				^AC <a>)
	(<ol> ^say <os>)
	(<a> ^action <os>)
	(<os> ^status complete)
-->
	(<a> ^action <os> -)
}


# RESPOND TO WM-QUERY COMMANDS BY SEARCHING FOR THE APPROPRIATE RETRIEVAL
sp {lib*actr*set*wm-query*search
	(state <s> ^Q <q>)
	(<q> ^wm-query <wmq>)
	(<wmq> ^root.WMnext <cand>)
	-{(<wmq> ^{<attr> <> root <> result} <val>)
	  (<cand> -^<attr> <val>)}				# It is not the case that the query has an attribute value that the candidate does not have
-->
	(<wmq> ^result <cand>)
}

sp {lib*actr*elaborate*wm-query*return-result
	(state <s> ^Q <q>
				^RT <rt>)
	(<q> ^wm-query <wmq>)
	(<wmq> ^result <res>)
	-{(<wmq> ^result > <res>)}		# Only return the first if there are multiple results
	(<res> ^<attr> <val>)
-->
	(<rt> ^<attr> <val>)
}
sp {lib*actr*elaborate*wm-query*return-result*id
	(state <s> ^Q <q>
				^RT <rt>)
	(<q> ^wm-query <wmq>)
	(<wmq> ^result <res>)
	-{(<wmq> ^result > <res>)}		# Only return the first if there are multiple results
	(<res> ^<attr> <val>)
-->
	(<rt> ^RTid <res>)
}

sp {lib*actr*elaborate*wm-query*error
	(state <s> ^smem <smem>
				^Q <q>
				^RT <r>)
	(<q> ^wm-query <wmq>)
	(<wmq> -^result )
-->
	(<smem> ^rt-result error)
}

# RESPOND TO RETRIEVALS BY FOLLOWING WM POINTERS
sp {lib*actr*elaborate*retrieval
	(state <s> ^Q <q>
				^RT <rt>)
	(<q> ^retrieve <r>
		 ^stamp.command <r>
		-^retrieve <> <r>)		# Avoid the edge case where a chunk repeatedly fires to recreate the same retrieve command
	(<r> ^<attr> <val>)
	#-{(<q> ^<< query retrieve wm-query >> <> <r>)}		# Don't replace until the old retrieve has been removed - else it would then trigger this rule before removal
-->
	(<rt> ^<attr> <val>)
	#(write (crlf) |*** WM-RETRIEVE: | <r> )
}
sp {lib*actr*elaborate*retrieval*id
	(state <s> ^Q <q>
				^RT <rt>)
	(<q> ^retrieve <r>
		 ^stamp.command <r>
		-^retrieve <> <r>)		# Avoid the edge case where a chunk repeatedly fires to recreate the same retrieve command
	(<r> ^<attr> <val>)
-->
	(<rt> ^RTid <r>)
	#(write (crlf) |*** WM-RETRIEVE: | <r> )
}

# PROCESS NEW SMEM COMMANDS AND DC-STAMP THEM
sp {lib*actr*set*smem-command*stamp
	:o-support
	(state <s> ^Q <q>)
	(<q> ^{<attr> << query retrieve wm-query >>} <cmd>)
	-{(<q> ^stamp <st>)
	  (<st> ^command <cmd>)}
-->
	(<q> ^stamp <stnew>)
	(<stnew> ^command <cmd>
			^dc (dc))
}

# TRANSFER QUERIES TO SMEM
sp {lib*actr*elaborate*query*transfer
	"Treat a query as a query if it has augmentations."
	(state <s> ^Q.query <q>
				^smem.command <scmd>)
	(<scmd> -^store )
	(<q> ^<attr> <any>)
-->
	(<scmd> ^query <q>)
}

# TRANSFER QUERY RESULTS FROM SMEM
sp {lib*actr*elaborate*query*collect
	(state <s> ^smem.result.retrieved <sret>
				^RT <r>)
	(<sret> ^<slot> <val>)
-->
	(<r> ^<slot> <val> )
}
sp {lib*actr*elaborate*query*collect*id
	(state <s> ^smem.result.retrieved <sret>
				^RT <r>)
	(<sret> ^<slot> <val>)
-->
	(<r> ^RTid <sret>)
}

# REMOVE OLD QUERIES WHEN NEW ONES ARISE
sp {lib*actr*set*replace-q-command
	"If there is a retrieve newer than a retrieve, based on the dc-stamp, then remove the old one and dont clear RT"
	:o-support
	(state <s> ^Q <q>)
	(<q> ^<< query retrieve wm-query >> <q1>
		^{<attr> << query retrieve wm-query >>} {<q2> <> <q1>}
		^stamp <st1>
		^stamp <st2>)
	(<st1> ^command <q1>
			^dc <dc1>)
	(<st2> ^command <q2>
			^dc < <dc1>)
-->
	(<q> ^<attr> <q2> -
		^stamp <st2> -)
}

sp {lib*actr*elaborate*query*success
	(state <s> ^smem <smem>
			^RT <r>)
	(<r> ^<any> )
	(<smem> -^rt-result error)
-->
	(<smem> ^rt-result success)
}
sp {lib*actr*elaborate*query*failure*error
	(state <s> ^smem <smem>
			^RT <r>)
	(<smem> ^result.failure
			^command.query.<any>)
-->
	(<smem> ^rt-result error)
}



# CLEAN RETRIEVAL BUFFER COMMAND AFTER GETTING RESULT
sp {lib*actr*apply*clear-rt*clear-command
	:o-support
	(state <s> ^G <g>
			^flags <f>
			^Q <q>)
	(<q> ^{<attr> << query retrieve wm-query >>} <rt>
		^stamp <st>)
	(<st> ^command <rt>)
	(<f> ^clear-rt <any>)
-->
	(<q> ^<attr> <rt> -
		^stamp <st> -)
}
sp {lib*actr*apply*smem-command*clear-empty
	:o-support
	(state <s> ^G <g>
			^flags <f>
			^Q <q>)
	(<q> -^<< query retrieve wm-query >> <qry>)
	(<f> ^clear-rt <any>)
-->
	(<f> ^clear-rt <any> -)
}


# NEWWM #
sp {lib*actr*set*newwm*stamp
	:o-support
	(state <s> ^NW <n>)
	(<n> ^wm <cmd>)
	-{(<n> ^stamp <st>)
	  (<st> ^command <cmd>)}
-->
	(<n> ^stamp <stnew>)
	(<stnew> ^command <cmd>
			^dc (dc))
}
sp {lib*actr*set*newwm*swap
	:o-support
	(state <s> ^NW <n>
				^WM <w>)
	(<n> ^wm <nw>
		^stamp <st>
		-^swapped-dc <dc>)	# Only perform one newWM swap per decision cycle (so chunks that create commands don't fire infinitely)
	(<st> ^command <nw>
		^dc <dc>)
-->
	(<s> ^WM <w> -
		^WM <nw>)
	(<w> ^WMnext <nw>)	# Save the forward pointer, rather than the Actransfer-esque backwards pointer
	(<n> ^wm <nw> -
		^stamp <st> -
		^swapped-dc <dc>)
	#(write (crlf) |*** WM-STORE: | <w> )
}
sp {lib*actr*set*newwm*clear-swapped
	"Keep only the most recent swap on record."
	:o-support
	(state <s> ^NW <n>)
	(<n> ^swapped-dc <dcold>
		^swapped-dc > <dcold>)
-->
	(<n> ^swapped-dc <dcold> -)
}
sp {lib*actr*set*newwm*remove-duplicates
	"A failsafe in case the user makes a chunk that would infinitely remake newWM commands, if conditioned on WM."
	:o-support
	(state <s> ^NW <n>)
	(<n> ^swapped-dc <dc>
		^wm <cmd>
		^stamp <st>)
	(<st> ^command <cmd>
		^dc <dc>)		# If there's an unprocessed command but there has already been a swap this cycle
-->
	(<n> ^wm <cmd> -)	# Then remove the extra command. Only one allowed per cycle.
}

sp {lib*actr*set*update-wmnext*add
	:o-support
	(state <s> ^WM <w>)
	(<w> ^WMprev <wmp>)
	(<wmp> -^WMnext <w>)
-->
	(<wmp> ^WMnext <w>)
}
sp {lib*actr*set*update-wmnext*remove		# (Never fires apparently)
	:o-support
	(state <s> ^WM <w>)
	(<w> ^WMnext <wmn>)
	(<wmn> -^WMprev <w>)
-->
	(<w> ^WMnext <wmn> -)
}

# ADD WAIT OPERATOR BEHAVIOR
sp {lib*actr*propose*wait
	(state <s> ^io.input-link.slot1 |pending|
				-^operator.name |wait-pending|)
-->
	(<s> ^operator <o> + = <)
	(<o> ^name wait-pending)
}

