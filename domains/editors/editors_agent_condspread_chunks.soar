sp {chunk*apply*props*spread-result*snc*t236647-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask emacs)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name emacs_3)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*emacs*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 304)
}

sp {chunk*apply*props*spread-result*snc*t236640-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name emacs_3)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*emacs*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 307)
}

sp {chunk*apply*props*spread-result*snc*t212577-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name emacs_2)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*emacs*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 307)
}

sp {chunk*apply*props*spread-result*snc*t212570-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask emacs)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name emacs_2)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*emacs*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 304)
}

sp {chunk*elaborate*props*spread-result*onc*return*t193130-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-finish)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-finish ^status success ^instruction <i1>
           ^condition <c1>)
    (<i1> ^name apply*editors*emacs*finish)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1)
    (link-stm-to-ltm <c1> 5)
}

sp {chunk*apply*props*spread-result*snc*t193091-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 end)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*finish)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 19)
}

sp {chunk*apply*props*spread-result*snc*t193084-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol <g2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*finish)
    (<c1> ^name _P42)
    (link-stm-to-ltm <c1> 16)
}

sp {chunk*apply*props*spread-result*snc*t193077-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*finish)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 13)
}

sp {chunk*elaborate*props*spread-result*onc*return*t192918-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-line-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-line-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-line*insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 54)
    (link-stm-to-ltm <c1> 57)
}

sp {chunk*apply*props*spread-result*snc*t192879-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 67)
}

sp {chunk*apply*props*spread-result*snc*t192872-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 63)
}

sp {chunk*apply*props*spread-result*snc*t192865-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 65)
}

sp {chunk*elaborate*props*spread-result*onc*return*t192165-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-line-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-line-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-line*delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 69)
    (link-stm-to-ltm <c1> 72)
}

sp {chunk*apply*props*spread-result*snc*t192126-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 79)
}

sp {chunk*apply*props*spread-result*snc*t192119-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 81)
}

sp {chunk*apply*props*spread-result*snc*t192112-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 77)
}

sp {chunk*elaborate*props*spread-result*onc*return*t190972-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-line-type)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-line-type ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-line*type)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 22)
    (link-stm-to-ltm <c1> 25)
}

sp {chunk*apply*props*spread-result*snc*t190933-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*type)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 33)
}

sp {chunk*apply*props*spread-result*snc*t190926-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol type-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*type)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 36)
}

sp {chunk*elaborate*props*spread-result*onc*return*t190859-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-line-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-line-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-line*replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 38)
    (link-stm-to-ltm <c1> 41)
}

sp {chunk*apply*props*spread-result*snc*t190820-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 52)
}

sp {chunk*apply*props*spread-result*snc*t190813-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 49)
}

sp {chunk*apply*props*spread-result*snc*t190806-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-line*replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 47)
}

sp {chunk*elaborate*props*spread-result*onc*return*t190137-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-word-action-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-word-action-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*word-action*delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 129)
    (link-stm-to-ltm <c1> 132)
}

sp {chunk*apply*props*spread-result*snc*t190098-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 137)
}

sp {chunk*apply*props*spread-result*snc*t190091-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 139)
}

sp {chunk*apply*props*spread-result*snc*t190084-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 141)
}

sp {chunk*elaborate*props*spread-result*onc*return*t189488-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-word-for-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-word-for-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-word*for-delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 212)
    (link-stm-to-ltm <c1> 215)
}

sp {chunk*apply*props*spread-result*snc*t189449-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 224)
}

sp {chunk*apply*props*spread-result*snc*t189442-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 222)
}

sp {chunk*apply*props*spread-result*snc*t189435-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 220)
}

sp {chunk*elaborate*props*spread-result*onc*return*t188788-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-word-action-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-word-action-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*word-action*insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 112)
    (link-stm-to-ltm <c1> 115)
}

sp {chunk*apply*props*spread-result*snc*t188749-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 127)
}

sp {chunk*apply*props*spread-result*snc*t188742-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 125)
}

sp {chunk*apply*props*spread-result*snc*t188735-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 123)
}

sp {chunk*elaborate*props*spread-result*onc*return*t188058-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-word-for-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-word-for-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-word*for-insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 197)
    (link-stm-to-ltm <c1> 200)
}

sp {chunk*apply*props*spread-result*snc*t188019-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 206)
}

sp {chunk*apply*props*spread-result*snc*t188012-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 210)
}

sp {chunk*apply*props*spread-result*snc*t188005-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 208)
}

sp {chunk*elaborate*props*spread-result*onc*return*t187745-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-line-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-line-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-line*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 259)
    (link-stm-to-ltm <c1> 262)
}

sp {chunk*apply*props*spread-result*snc*t187706-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-line*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 267)
}

sp {chunk*apply*props*spread-result*snc*t187699-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-line*next)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 274)
}

sp {chunk*apply*props*spread-result*snc*t187692-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot1 <s2>)
    (<v1> ^slot4 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-line*next)
    (<c1> ^name _P51)
    (link-stm-to-ltm <c1> 270)
}

sp {chunk*elaborate*props*spread-result*onc*return*t187525-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-word-action-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-word-action-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*word-action*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 83)
    (link-stm-to-ltm <c1> 86)
}

sp {chunk*apply*props*spread-result*snc*t187486-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*next)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 95)
}

sp {chunk*apply*props*spread-result*snc*t187479-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*next)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 93)
}

sp {chunk*apply*props*spread-result*snc*t187472-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 91)
}

sp {chunk*elaborate*props*spread-result*onc*return*t187413-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-word-action-post-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-word-action-post-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*word-action*post-insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 97)
    (link-stm-to-ltm <c1> 100)
}

sp {chunk*apply*props*spread-result*snc*t187374-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*post-insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 108)
}

sp {chunk*apply*props*spread-result*snc*t187367-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol still-type)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*post-insert)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 110)
}

sp {chunk*elaborate*props*spread-result*onc*return*t187303-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-word-action-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-word-action-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*word-action*replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 143)
    (link-stm-to-ltm <c1> 146)
}

sp {chunk*apply*props*spread-result*snc*t187264-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 155)
}

sp {chunk*apply*props*spread-result*snc*t187257-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 157)
}

sp {chunk*apply*props*spread-result*snc*t187250-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*word-action*replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 153)
}

sp {chunk*elaborate*props*spread-result*onc*return*t187203-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-word-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-word-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-word*read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 159)
    (link-stm-to-ltm <c1> 162)
}

sp {chunk*apply*props*spread-result*snc*t187164-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 169)
}

sp {chunk*apply*props*spread-result*snc*t187157-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot1 <s2>)
    (<v1> ^slot2 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*read)
    (<c1> ^name _P55)
    (link-stm-to-ltm <c1> 172)
}

sp {chunk*apply*props*spread-result*snc*t187147-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 176)
}

sp {chunk*elaborate*props*spread-result*onc*return*t187104-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-word-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-word-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-word*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 178)
    (link-stm-to-ltm <c1> 181)
}

sp {chunk*apply*props*spread-result*snc*t187065-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*next)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 188)
}

sp {chunk*apply*props*spread-result*snc*t187058-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot1 <s2>)
    (<v1> ^slot2 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*next)
    (<c1> ^name _P54)
    (link-stm-to-ltm <c1> 191)
}

sp {chunk*apply*props*spread-result*snc*t187048-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 186)
}

sp {chunk*apply*props*spread-result*snc*t187041-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*next)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 195)
}

sp {chunk*elaborate*props*spread-result*onc*return*t186984-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-task-word-for-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-task-word-for-replace
           ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-task-word*for-replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 226)
    (link-stm-to-ltm <c1> 229)
}

sp {chunk*apply*props*spread-result*snc*t186945-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 236)
}

sp {chunk*apply*props*spread-result*snc*t186938-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 240)
}

sp {chunk*apply*props*spread-result*snc*t186931-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-task-word*for-replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 238)
}

sp {chunk*elaborate*props*spread-result*onc*return*t186870-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-find-line-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-find-line-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*find-line*read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 242)
    (link-stm-to-ltm <c1> 245)
}

sp {chunk*apply*props*spread-result*snc*t186831-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-line*read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 257)
}

sp {chunk*apply*props*spread-result*snc*t186824-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot1 <s2>)
    (<v1> ^slot4 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-line*read)
    (<c1> ^name _P52)
    (link-stm-to-ltm <c1> 253)
}

sp {chunk*apply*props*spread-result*snc*t186814-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*find-line*read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 250)
}

sp {chunk*elaborate*props*spread-result*onc*return*t186757-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-init-find-goal)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-init-find-goal ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*init*find-goal)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 276)
    (link-stm-to-ltm <c1> 279)
}

sp {chunk*apply*props*spread-result*snc*t186718-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-goal)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*init*find-goal)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 287)
}

sp {chunk*apply*props*spread-result*snc*t186711-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask emacs)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*init*find-goal)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 285)
}

sp {chunk*apply*props*spread-result*snc*t186704-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 { <s2> <> end })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*emacs*init*find-goal)
    (<c1> ^name _P10)
    (link-stm-to-ltm <c1> 290)
}

sp {chunk*elaborate*props*spread-result*onc*return*t186650-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-emacs-init-start)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-emacs-init-start ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*emacs*init*start)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 292)
    (link-stm-to-ltm <c1> 295)
}

sp {chunk*apply*props*spread-result*snc*t186611-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask emacs)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name emacs_1)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*emacs*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 304)
}

sp {chunk*apply*props*spread-result*snc*t186604-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name emacs_1)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*emacs*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 307)
}

sp {chunk*apply*props*spread-result*snc*t150069-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask edt)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name edt_3)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*edt*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 726)
}

sp {chunk*apply*props*spread-result*snc*t150062-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name edt_3)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*edt*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 728)
}

sp {chunk*apply*props*spread-result*snc*t120622-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name edt_2)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*edt*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 728)
}

sp {chunk*apply*props*spread-result*snc*t120615-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask edt)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name edt_2)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*edt*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 726)
}

sp {chunk*elaborate*props*spread-result*onc*return*t96292-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-finish)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-finish ^status success ^instruction <i1>
           ^condition <c1>)
    (<i1> ^name apply*editors*edt*finish)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 309)
    (link-stm-to-ltm <c1> 312)
}

sp {chunk*apply*props*spread-result*snc*t96253-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol <g2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*finish)
    (<c1> ^name _P42)
    (link-stm-to-ltm <c1> 319)
}

sp {chunk*apply*props*spread-result*snc*t96246-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*finish)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 317)
}

sp {chunk*apply*props*spread-result*snc*t96239-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 end)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*finish)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 321)
}

sp {chunk*elaborate*props*spread-result*onc*return*t95929-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-line-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-line-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-line*insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 351)
    (link-stm-to-ltm <c1> 354)
}

sp {chunk*apply*props*spread-result*snc*t95890-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 359)
}

sp {chunk*apply*props*spread-result*snc*t95883-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 363)
}

sp {chunk*apply*props*spread-result*snc*t95876-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 361)
}

sp {chunk*elaborate*props*spread-result*onc*return*t94886-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-line-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-line-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-line*delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 365)
    (link-stm-to-ltm <c1> 368)
}

sp {chunk*apply*props*spread-result*snc*t94847-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 377)
}

sp {chunk*apply*props*spread-result*snc*t94840-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 375)
}

sp {chunk*apply*props*spread-result*snc*t94833-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 373)
}

sp {chunk*elaborate*props*spread-result*onc*return*t94312-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 601)
    (link-stm-to-ltm <c1> 604)
}

sp {chunk*apply*props*spread-result*snc*t94273-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot3 short)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*next)
    (<c1> ^name _P45)
    (link-stm-to-ltm <c1> 614)
}

sp {chunk*apply*props*spread-result*snc*t94266-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 609)
}

sp {chunk*apply*props*spread-result*snc*t94259-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*next)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 611)
}

sp {chunk*apply*props*spread-result*snc*t94252-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot2 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*next)
    (<c1> ^name _P46)
    (link-stm-to-ltm <c1> 617)
}

sp {chunk*elaborate*props*spread-result*onc*return*t93576-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-line-type)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-line-type ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-line*type)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 323)
    (link-stm-to-ltm <c1> 326)
}

sp {chunk*apply*props*spread-result*snc*t93537-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol type-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*type)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 334)
}

sp {chunk*apply*props*spread-result*snc*t93530-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*type)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 332)
}

sp {chunk*elaborate*props*spread-result*onc*return*t93466-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-line-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-line-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-line*replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 336)
    (link-stm-to-ltm <c1> 339)
}

sp {chunk*apply*props*spread-result*snc*t93427-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 345)
}

sp {chunk*apply*props*spread-result*snc*t93420-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 347)
}

sp {chunk*apply*props*spread-result*snc*t93413-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-line*replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 349)
}

sp {chunk*elaborate*props*spread-result*onc*return*t93241-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-find-destination)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-find-destination
           ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*find-destination)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 583)
    (link-stm-to-ltm <c1> 586)
}

sp {chunk*apply*props*spread-result*snc*t93202-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*find-destination)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 593)
}

sp {chunk*apply*props*spread-result*snc*t93195-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*find-destination)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 595)
}

sp {chunk*apply*props*spread-result*snc*t93188-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*find-destination)
    (<c1> ^name _P47)
    (link-stm-to-ltm <c1> 598)
}

sp {chunk*elaborate*props*spread-result*onc*return*t93129-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-t-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-t-word ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*t-word)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 620)
    (link-stm-to-ltm <c1> 623)
}

sp {chunk*apply*props*spread-result*snc*t93090-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*t-word)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 628)
}

sp {chunk*apply*props*spread-result*snc*t93083-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot3 long)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*t-word)
    (<c1> ^name _P45)
    (link-stm-to-ltm <c1> 632)
}

sp {chunk*apply*props*spread-result*snc*t93076-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*t-word)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 630)
}

sp {chunk*elaborate*props*spread-result*onc*return*t93029-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-look)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-look ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*look)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 635)
    (link-stm-to-ltm <c1> 638)
}

sp {chunk*apply*props*spread-result*snc*t92990-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*look)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 645)
}

sp {chunk*apply*props*spread-result*snc*t92983-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*look)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 643)
}

sp {chunk*apply*props*spread-result*snc*t92976-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 { <s2> <> single-word })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*look)
    (<c1> ^name _P10)
    (link-stm-to-ltm <c1> 647)
}

sp {chunk*apply*props*spread-result*snc*t92969-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 { <s2> <> word })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*look)
    (<c1> ^name _P44)
    (link-stm-to-ltm <c1> 650)
}

sp {chunk*elaborate*props*spread-result*onc*return*t92891-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-read-instruction)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-read-instruction
           ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*read-instruction)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 653)
    (link-stm-to-ltm <c1> 656)
}

sp {chunk*apply*props*spread-result*snc*t92852-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*read-instruction)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 661)
}

sp {chunk*apply*props*spread-result*snc*t92845-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol line-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*read-instruction)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 663)
}

sp {chunk*apply*props*spread-result*snc*t92838-1
    :chunk
    (state <s1> ^smem <s2> -^props-agnostic-add <p1>)
    (<s2> ^rt-result error)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*read-instruction)
    (<c1> ^name _P18)
    (link-stm-to-ltm <c1> 666)
}

sp {chunk*elaborate*props*spread-result*onc*return*t92427-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-word-action-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-word-action-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*word-action*delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 409)
    (link-stm-to-ltm <c1> 412)
}

sp {chunk*apply*props*spread-result*snc*t92388-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 421)
}

sp {chunk*apply*props*spread-result*snc*t92381-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 417)
}

sp {chunk*apply*props*spread-result*snc*t92374-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 419)
}

sp {chunk*elaborate*props*spread-result*onc*return*t91784-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-word-for-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-word-for-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-word*for-delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 484)
    (link-stm-to-ltm <c1> 487)
}

sp {chunk*apply*props*spread-result*snc*t91745-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 494)
}

sp {chunk*apply*props*spread-result*snc*t91738-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 492)
}

sp {chunk*apply*props*spread-result*snc*t91731-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 496)
}

sp {chunk*elaborate*props*spread-result*onc*return*t90751-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-word-action-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-word-action-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*word-action*insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 393)
    (link-stm-to-ltm <c1> 396)
}

sp {chunk*apply*props*spread-result*snc*t90712-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 403)
}

sp {chunk*apply*props*spread-result*snc*t90705-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 405)
}

sp {chunk*apply*props*spread-result*snc*t90698-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 407)
}

sp {chunk*elaborate*props*spread-result*onc*return*t89987-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-word-for-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-word-for-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-word*for-insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 469)
    (link-stm-to-ltm <c1> 472)
}

sp {chunk*apply*props*spread-result*snc*t89948-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 478)
}

sp {chunk*apply*props*spread-result*snc*t89941-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 482)
}

sp {chunk*apply*props*spread-result*snc*t89934-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 480)
}

sp {chunk*elaborate*props*spread-result*onc*return*t89870-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-line-re-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-line-re-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-line*re-read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 512)
    (link-stm-to-ltm <c1> 515)
}

sp {chunk*apply*props*spread-result*snc*t89831-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 521)
}

sp {chunk*apply*props*spread-result*snc*t89824-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 526)
}

sp {chunk*apply*props*spread-result*snc*t89817-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1>)
    (<r1> ^slot3 <s2>)
    (<w1> ^slot2 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-read)
    (<c1> ^name _P33)
    (link-stm-to-ltm <c1> 524)
}

sp {chunk*elaborate*props*spread-result*onc*return*t89712-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-line-re-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-line-re-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-line*re-next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 528)
    (link-stm-to-ltm <c1> 531)
}

sp {chunk*apply*props*spread-result*snc*t89673-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-next)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 547)
}

sp {chunk*apply*props*spread-result*snc*t89666-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1>)
    (<r1> ^slot3 <s2>)
    (<w1> ^slot2 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-next)
    (<c1> ^name _P28)
    (link-stm-to-ltm <c1> 542)
}

sp {chunk*apply*props*spread-result*snc*t89656-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 539)
}

sp {chunk*apply*props*spread-result*snc*t89649-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1>)
    (<r1> ^slot2 <s2>)
    (<w1> ^slot1 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*re-next)
    (<c1> ^name _P29)
    (link-stm-to-ltm <c1> 545)
}

sp {chunk*elaborate*props*spread-result*onc*return*t89558-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-line-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-line-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-line*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 564)
    (link-stm-to-ltm <c1> 567)
}

sp {chunk*apply*props*spread-result*snc*t89519-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1>)
    (<w1> ^slot2 <s2> ^slot1 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*next)
    (<c1> ^name _P24)
    (link-stm-to-ltm <c1> 576)
}

sp {chunk*apply*props*spread-result*snc*t89509-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^RT <r1>)
    (<r1> -^slot3 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*next)
    (<c1> ^name _P25)
    (link-stm-to-ltm <c1> 579)
}

sp {chunk*apply*props*spread-result*snc*t89502-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*next)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 581)
}

sp {chunk*apply*props*spread-result*snc*t89495-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 573)
}

sp {chunk*elaborate*props*spread-result*onc*return*t89116-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-word-action-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-word-action-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*word-action*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 379)
    (link-stm-to-ltm <c1> 382)
}

sp {chunk*apply*props*spread-result*snc*t89077-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*next)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 391)
}

sp {chunk*apply*props*spread-result*snc*t89070-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*next)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 389)
}

sp {chunk*apply*props*spread-result*snc*t89063-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 387)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88999-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-word-action-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-word-action-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*word-action*replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 423)
    (link-stm-to-ltm <c1> 426)
}

sp {chunk*apply*props*spread-result*snc*t88960-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 431)
}

sp {chunk*apply*props*spread-result*snc*t88953-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 433)
}

sp {chunk*apply*props*spread-result*snc*t88946-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*word-action*replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 435)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88899-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-word-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-word-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-word*read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 437)
    (link-stm-to-ltm <c1> 440)
}

sp {chunk*apply*props*spread-result*snc*t88860-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 445)
}

sp {chunk*apply*props*spread-result*snc*t88853-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 450)
}

sp {chunk*apply*props*spread-result*snc*t88846-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot2 <s2>)
    (<v1> ^slot2 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*read)
    (<c1> ^name _P38)
    (link-stm-to-ltm <c1> 448)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88779-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-word-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-word-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-word*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 452)
    (link-stm-to-ltm <c1> 455)
}

sp {chunk*apply*props*spread-result*snc*t88740-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*next)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 462)
}

sp {chunk*apply*props*spread-result*snc*t88733-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot2 <s2>)
    (<v1> ^slot2 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*next)
    (<c1> ^name _P37)
    (link-stm-to-ltm <c1> 465)
}

sp {chunk*apply*props*spread-result*snc*t88723-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*next)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 467)
}

sp {chunk*apply*props*spread-result*snc*t88716-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 460)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88628-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-task-word-for-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-task-word-for-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-task-word*for-replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 498)
    (link-stm-to-ltm <c1> 501)
}

sp {chunk*apply*props*spread-result*snc*t88589-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 508)
}

sp {chunk*apply*props*spread-result*snc*t88582-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 506)
}

sp {chunk*apply*props*spread-result*snc*t88575-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-task-word*for-replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 510)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88514-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-find-line-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-find-line-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*find-line*read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 549)
    (link-stm-to-ltm <c1> 552)
}

sp {chunk*apply*props*spread-result*snc*t88475-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 557)
}

sp {chunk*apply*props*spread-result*snc*t88468-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1>)
    (<w1> ^slot2 <s2> ^slot1 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*read)
    (<c1> ^name _P27)
    (link-stm-to-ltm <c1> 560)
}

sp {chunk*apply*props*spread-result*snc*t88458-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*find-line*read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 562)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88406-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-enter)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-enter ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*enter)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 668)
    (link-stm-to-ltm <c1> 671)
}

sp {chunk*apply*props*spread-result*snc*t88367-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol line-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*enter)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 678)
}

sp {chunk*apply*props*spread-result*snc*t88360-1
    :chunk
    (state <s1> ^smem <s2> -^props-agnostic-add <p1>)
    (<s2> ^rt-result success)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*enter)
    (<c1> ^name _P18)
    (link-stm-to-ltm <c1> 680)
}

sp {chunk*apply*props*spread-result*snc*t88353-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*enter)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 676)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88289-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-line-strategy-test)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-line-strategy-test ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*line-strategy*test)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 682)
    (link-stm-to-ltm <c1> 685)
}

sp {chunk*apply*props*spread-result*snc*t88250-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^smem <s2>)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*test)
    (<c1> ^name _P14)
    (link-stm-to-ltm <c1> 697)
}

sp {chunk*apply*props*spread-result*snc*t88243-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol line-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*test)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 694)
}

sp {chunk*apply*props*spread-result*snc*t88236-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*line-strategy*test)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 692)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88179-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-init-find-goal)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-init-find-goal ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*init*find-goal)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 699)
    (link-stm-to-ltm <c1> 702)
}

sp {chunk*apply*props*spread-result*snc*t88140-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-goal)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*init*find-goal)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 710)
}

sp {chunk*apply*props*spread-result*snc*t88133-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask edt)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*init*find-goal)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 708)
}

sp {chunk*apply*props*spread-result*snc*t88126-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 { <s2> <> end })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*edt*init*find-goal)
    (<c1> ^name _P10)
    (link-stm-to-ltm <c1> 712)
}

sp {chunk*elaborate*props*spread-result*onc*return*t88058-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-edt-init-start)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-edt-init-start ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*edt*init*start)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 714)
    (link-stm-to-ltm <c1> 717)
}

sp {chunk*apply*props*spread-result*snc*t88019-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name edt_1)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*edt*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 728)
}

sp {chunk*apply*props*spread-result*snc*t88012-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask edt)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name edt_1)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*edt*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 726)
}

sp {chunk*apply*props*spread-result*snc*t55955-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask ed)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name ed_3)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*ed*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1121)
}

sp {chunk*apply*props*spread-result*snc*t55948-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name ed_3)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*ed*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 1124)
}

sp {chunk*apply*props*spread-result*snc*t27920-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name ed_2)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*ed*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 1124)
}

sp {chunk*apply*props*spread-result*snc*t27913-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask ed)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name ed_2)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*ed*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1121)
}

sp {chunk*elaborate*props*spread-result*onc*return*t6981-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-finish)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-finish ^status success ^instruction <i1>
           ^condition <c1>)
    (<i1> ^name apply*editors*ed*finish)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 730)
    (link-stm-to-ltm <c1> 733)
}

sp {chunk*apply*props*spread-result*snc*t6942-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol <g2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*finish)
    (<c1> ^name _P42)
    (link-stm-to-ltm <c1> 741)
}

sp {chunk*apply*props*spread-result*snc*t6935-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*finish)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 739)
}

sp {chunk*apply*props*spread-result*snc*t6928-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 end)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*finish)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 744)
}

sp {chunk*elaborate*props*spread-result*onc*return*t6645-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-line-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-line-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-line*insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 772)
    (link-stm-to-ltm <c1> 775)
}

sp {chunk*apply*props*spread-result*snc*t6606-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 784)
}

sp {chunk*apply*props*spread-result*snc*t6599-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 782)
}

sp {chunk*apply*props*spread-result*snc*t6592-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 786)
}

sp {chunk*elaborate*props*spread-result*onc*return*t5927-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-line-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-line-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-line*delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 788)
    (link-stm-to-ltm <c1> 791)
}

sp {chunk*apply*props*spread-result*snc*t5888-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 798)
}

sp {chunk*apply*props*spread-result*snc*t5881-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 796)
}

sp {chunk*apply*props*spread-result*snc*t5874-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 800)
}

sp {chunk*elaborate*props*spread-result*onc*return*t5228-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-line-type)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-line-type ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-line*type)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 746)
    (link-stm-to-ltm <c1> 749)
}

sp {chunk*apply*props*spread-result*snc*t5189-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*type)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 754)
}

sp {chunk*apply*props*spread-result*snc*t5182-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol type-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*type)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 756)
}

sp {chunk*elaborate*props*spread-result*onc*return*t5118-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-line-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-line-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-line*replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 758)
    (link-stm-to-ltm <c1> 761)
}

sp {chunk*apply*props*spread-result*snc*t5079-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 766)
}

sp {chunk*apply*props*spread-result*snc*t5072-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 768)
}

sp {chunk*apply*props*spread-result*snc*t5065-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-line*replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 770)
}

sp {chunk*elaborate*props*spread-result*onc*return*t4869-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-line-strategy-pcmd)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-line-strategy-pcmd ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*line-strategy*pcmd)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1024)
    (link-stm-to-ltm <c1> 1027)
}

sp {chunk*apply*props*spread-result*snc*t4830-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol line-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*pcmd)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 1043)
}

sp {chunk*apply*props*spread-result*snc*t4823-1
    :chunk
    (state <s1> ^smem <s2> -^props-agnostic-add <p1>)
    (<s2> ^rt-result error)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*pcmd)
    (<c1> ^name _P18)
    (link-stm-to-ltm <c1> 1045)
}

sp {chunk*apply*props*spread-result*snc*t4816-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*pcmd)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1041)
}

sp {chunk*elaborate*props*spread-result*onc*return*t4411-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-word-action-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-word-action-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*word-action*delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 830)
    (link-stm-to-ltm <c1> 833)
}

sp {chunk*apply*props*spread-result*snc*t4372-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 842)
}

sp {chunk*apply*props*spread-result*snc*t4365-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 840)
}

sp {chunk*apply*props*spread-result*snc*t4358-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 838)
}

sp {chunk*elaborate*props*spread-result*onc*return*t3731-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-word-for-delete)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-word-for-delete ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-word*for-delete)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 912)
    (link-stm-to-ltm <c1> 915)
}

sp {chunk*apply*props*spread-result*snc*t3692-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-delete)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 924)
}

sp {chunk*apply*props*spread-result*snc*t3685-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 delete-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-delete)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 922)
}

sp {chunk*apply*props*spread-result*snc*t3678-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-delete)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 920)
}

sp {chunk*elaborate*props*spread-result*onc*return*t2716-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-word-action-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-word-action-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*word-action*insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 816)
    (link-stm-to-ltm <c1> 819)
}

sp {chunk*apply*props*spread-result*snc*t2677-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 826)
}

sp {chunk*apply*props*spread-result*snc*t2670-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 824)
}

sp {chunk*apply*props*spread-result*snc*t2663-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 828)
}

sp {chunk*elaborate*props*spread-result*onc*return*t1966-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-word-for-insert)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-word-for-insert ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-word*for-insert)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 898)
    (link-stm-to-ltm <c1> 901)
}

sp {chunk*apply*props*spread-result*snc*t1927-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 insert-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-insert)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 908)
}

sp {chunk*apply*props*spread-result*snc*t1920-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-insert)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 910)
}

sp {chunk*apply*props*spread-result*snc*t1913-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-insert)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 906)
}

sp {chunk*elaborate*props*spread-result*onc*return*t1856-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-line-re-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-line-re-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-line*re-read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 944)
    (link-stm-to-ltm <c1> 947)
}

sp {chunk*apply*props*spread-result*snc*t1817-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1>)
    (<r1> ^slot3 <s2>)
    (<w1> ^slot2 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-read)
    (<c1> ^name _P33)
    (link-stm-to-ltm <c1> 954)
}

sp {chunk*apply*props*spread-result*snc*t1807-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 952)
}

sp {chunk*apply*props*spread-result*snc*t1800-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 958)
}

sp {chunk*elaborate*props*spread-result*onc*return*t1722-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-line-re-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-line-re-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-line*re-next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 960)
    (link-stm-to-ltm <c1> 963)
}

sp {chunk*apply*props*spread-result*snc*t1683-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1>)
    (<r1> ^slot2 <s2>)
    (<w1> ^slot1 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-next)
    (<c1> ^name _P29)
    (link-stm-to-ltm <c1> 981)
}

sp {chunk*apply*props*spread-result*snc*t1673-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1>)
    (<r1> ^slot3 <s2>)
    (<w1> ^slot2 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-next)
    (<c1> ^name _P28)
    (link-stm-to-ltm <c1> 977)
}

sp {chunk*apply*props*spread-result*snc*t1663-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-next)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 985)
}

sp {chunk*apply*props*spread-result*snc*t1656-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*re-next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 975)
}

sp {chunk*elaborate*props*spread-result*onc*return*t1578-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-line-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-line-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-line*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1003)
    (link-stm-to-ltm <c1> 1006)
}

sp {chunk*apply*props*spread-result*snc*t1539-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^RT <r1>)
    (<r1> -^slot3 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*next)
    (<c1> ^name _P25)
    (link-stm-to-ltm <c1> 1019)
}

sp {chunk*apply*props*spread-result*snc*t1532-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1013)
}

sp {chunk*apply*props*spread-result*snc*t1525-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*next)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 1022)
}

sp {chunk*apply*props*spread-result*snc*t1518-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1>)
    (<w1> ^slot2 <s2> ^slot1 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*next)
    (<c1> ^name _P24)
    (link-stm-to-ltm <c1> 1015)
}

sp {chunk*elaborate*props*spread-result*onc*return*t1122-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-word-action-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-word-action-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*word-action*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 802)
    (link-stm-to-ltm <c1> 805)
}

sp {chunk*apply*props*spread-result*snc*t1083-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*next)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 814)
}

sp {chunk*apply*props*spread-result*snc*t1076-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*next)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 812)
}

sp {chunk*apply*props*spread-result*snc*t1069-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 810)
}

sp {chunk*elaborate*props*spread-result*onc*return*t981-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-word-action-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-word-action-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*word-action*replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 844)
    (link-stm-to-ltm <c1> 847)
}

sp {chunk*apply*props*spread-result*snc*t942-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 860)
}

sp {chunk*apply*props*spread-result*snc*t935-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol word-action)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 862)
}

sp {chunk*apply*props*spread-result*snc*t928-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*word-action*replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 858)
}

sp {chunk*elaborate*props*spread-result*onc*return*t864-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-word-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-word-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-word*read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 864)
    (link-stm-to-ltm <c1> 867)
}

sp {chunk*apply*props*spread-result*snc*t825-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 872)
}

sp {chunk*apply*props*spread-result*snc*t818-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot2 <s2>)
    (<v1> ^slot2 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*read)
    (<c1> ^name _P38)
    (link-stm-to-ltm <c1> 874)
}

sp {chunk*apply*props*spread-result*snc*t808-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 878)
}

sp {chunk*elaborate*props*spread-result*onc*return*t758-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-word-next)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-word-next ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-word*next)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 880)
    (link-stm-to-ltm <c1> 883)
}

sp {chunk*apply*props*spread-result*snc*t719-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*next)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 888)
}

sp {chunk*apply*props*spread-result*snc*t712-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*next)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 896)
}

sp {chunk*apply*props*spread-result*snc*t705-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^V <v1>)
    (<w1> ^slot2 <s2>)
    (<v1> ^slot2 { <s3> <> <s2> })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*next)
    (<c1> ^name _P37)
    (link-stm-to-ltm <c1> 892)
}

sp {chunk*apply*props*spread-result*snc*t695-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*next)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 890)
}

sp {chunk*elaborate*props*spread-result*onc*return*t624-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-task-word-for-replace)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-task-word-for-replace ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-task-word*for-replace)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 926)
    (link-stm-to-ltm <c1> 929)
}

sp {chunk*apply*props*spread-result*snc*t585-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-replace)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 936)
}

sp {chunk*apply*props*spread-result*snc*t578-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-task)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-replace)
    (<c1> ^name _P35)
    (link-stm-to-ltm <c1> 941)
}

sp {chunk*apply*props*spread-result*snc*t571-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 replace-word)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-task-word*for-replace)
    (<c1> ^name _P34)
    (link-stm-to-ltm <c1> 938)
}

sp {chunk*elaborate*props*spread-result*onc*return*t507-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-find-line-read)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-find-line-read ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*find-line*read)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 987)
    (link-stm-to-ltm <c1> 990)
}

sp {chunk*apply*props*spread-result*snc*t468-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-line)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*read)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 1001)
}

sp {chunk*apply*props*spread-result*snc*t461-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*read)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 995)
}

sp {chunk*apply*props*spread-result*snc*t454-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1>)
    (<w1> ^slot2 <s2> ^slot1 <s2>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*find-line*read)
    (<c1> ^name _P27)
    (link-stm-to-ltm <c1> 997)
}

sp {chunk*elaborate*props*spread-result*onc*return*t406-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-line-strategy-enter)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-line-strategy-enter ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*line-strategy*enter)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1047)
    (link-stm-to-ltm <c1> 1050)
}

sp {chunk*apply*props*spread-result*snc*t367-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol line-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*enter)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 1058)
}

sp {chunk*apply*props*spread-result*snc*t360-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*enter)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1056)
}

sp {chunk*apply*props*spread-result*snc*t353-1
    :chunk
    (state <s1> ^smem <s2> -^props-agnostic-add <p1>)
    (<s2> ^rt-result success)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*enter)
    (<c1> ^name _P18)
    (link-stm-to-ltm <c1> 1060)
}

sp {chunk*elaborate*props*spread-result*onc*return*t289-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-line-strategy-test)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-line-strategy-test ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*line-strategy*test)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1063)
    (link-stm-to-ltm <c1> 1066)
}

sp {chunk*apply*props*spread-result*snc*t250-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*test)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1079)
}

sp {chunk*apply*props*spread-result*snc*t243-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^smem <s2>)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*test)
    (<c1> ^name _P14)
    (link-stm-to-ltm <c1> 1083)
}

sp {chunk*apply*props*spread-result*snc*t236-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol line-strategy)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*line-strategy*test)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 1081)
}

sp {chunk*elaborate*props*spread-result*onc*return*t179-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-init-find-goal)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-init-find-goal ^status success
           ^instruction <i1> ^condition <c1>)
    (<i1> ^name apply*editors*ed*init*find-goal)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1086)
    (link-stm-to-ltm <c1> 1089)
}

sp {chunk*apply*props*spread-result*snc*t140-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gcontrol find-goal)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*init*find-goal)
    (<c1> ^name |_P9|)
    (link-stm-to-ltm <c1> 1101)
}

sp {chunk*apply*props*spread-result*snc*t133-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1>)
    (<g1> ^Gtask ed)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*init*find-goal)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1099)
}

sp {chunk*apply*props*spread-result*snc*t126-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1>)
    (<v1> ^slot1 { <s2> <> end })
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i1> ^condition <c1>)
    (<i1> ^name propose*editors*ed*init*find-goal)
    (<c1> ^name _P10)
    (link-stm-to-ltm <c1> 1104)
}

sp {chunk*elaborate*props*spread-result*onc*return*t46-1
    :chunk
    (state <s1> ^operator <o1> -^props-agnostic-add <p1>)
    (<o1> ^name editors-ed-init-start)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^o-supported editors-ed-init-start ^status success ^instruction <i1>
           ^condition <c1>)
    (<i1> ^name apply*editors*ed*init*start)
    (<c1> ^name |_P4|)
    (link-stm-to-ltm <i1> 1107)
    (link-stm-to-ltm <c1> 1110)
}

sp {chunk*apply*props*spread-result*snc*t22-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> ^Gtask ed)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name ed_1)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*ed*init*start)
    (<c1> ^name |_P1|)
    (link-stm-to-ltm <c1> 1121)
}

sp {chunk*apply*props*spread-result*snc*t15-1
    :chunk
    (state <s1> ^type state -^props-agnostic-add <p1> ^G <g1> ^topstate <t1>)
    (<g1> -^Gcontrol <g2>)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name ed_1)
    -->
    (<s1> ^prop-condition-xp <p2>)
    (<p2> ^status success ^instruction <i3> ^condition <c1>)
    (<i3> ^name propose*editors*ed*init*start)
    (<c1> ^name |_P2|)
    (link-stm-to-ltm <c1> 1124)
}


