sp {chunkx2*apply*props*success*action*add*new*t3746-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-finish)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^clear-rt elio-procedure-b-finish)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3746-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-procedure-b-finish)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 <s5> ^slot1 enter)
}

sp {chunkx2*apply*props*success*action*add*replace*t3746-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-finish)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^Gtask <g2> - ^Gtask finish)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t3657-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U11 ^attr2 3 ^attr1 slot1 ^lti-name _P10 ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^WM <w1>)
    (<w1> ^slot1 <s3>)
    (<i1> ^3 { <i2> <> <s3> })
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunkx2*apply*props*success*action*add*new*t3615-3
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^NW <n1> ^operator <o1> ^RT <r1> ^WM <w2> ^G <g1>)
    (<n1> -^wm <w1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-part-mult-index1-mult)
    (<r1> ^slot2 <s2>)
    (<w2> ^slot2 <s3>)
    -->
    (<n1> ^wm <w3>)
    (<w3> ^slot1 part-mult-index1)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3615-2
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1> ^NW <n1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-part-mult-index1-mult)
    (<r1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<w1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot1 mult ^slot3 <s9> ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*replace*t3615-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^RT <r1> ^NW <n1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtop <g2>)
    (<o1> ^name elio-part-mult-index1-mult)
    (<r1> ^slot2 <s2>)
    (<w1> ^slot2 <s3>)
    -->
    (<g1> ^Gtop <g2> - ^Gtop <w1>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3280-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1> ^V <v1>)
    (<o1> ^name elio-solid-lime-diff-mult)
    (<r1> ^slot4 <s2> ^slot4 <s3> ^slot4 <s4> ^slot4 <s5>)
    (<v1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot2 <s9> ^slot1 mult ^slot3 <s5>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3260-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^Q <q1> ^WM <w1> ^V <v1>)
    (<o1> ^name elio-solid-lime-diff-diff)
    (<w1> ^slot2 <s2>)
    (<v1> ^slot2 <s3>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 solid ^slot1 read)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3260-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^Q <q1> ^WM <w1> ^V <v1>)
    (<o1> ^name elio-solid-lime-diff-diff)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<v1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot3 <s9> ^slot1 subtract ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3156-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1>)
    (<o1> ^name elio-mean-toxin-divide)
    (<r1> ^slot4 <s2> ^slot4 <s3> ^slot4 <s4> ^slot4 <s5>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot2 <s5> ^slot1 div ^slot3 2)
}

sp {chunkx2*apply*props*success*action*add*new*t3073-4
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^operator <o1>
          ^topstate <t1>)
    (<g1> -^Gparent <g2> -^props-agnostic-add <p2> ^Gtask <g3>)
    (<o1> ^name elio-procedure-b-start)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name procedure-b)
    -->
    (<g1> ^Gparent <g3>)
}

sp {chunkx2*apply*props*success*action*add*new*t3073-3
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^topstate <t1>)
    (<g1> -^Gtop <g2> -^props-agnostic-add <p2>)
    (<o1> ^name elio-procedure-b-start)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name procedure-b)
    -->
    (<g1> ^Gtop <w1>)
}

sp {chunkx2*apply*props*success*action*add*new*t3073-2
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^operator <o1>
          ^topstate <t1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-procedure-b-start)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name procedure-b)
    -->
    (<g1> ^clear-rt elio-procedure-b-start)
}

sp {chunkx2*apply*props*success*action*add*replace*t3073-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^operator <o1>
          ^topstate <t1>)
    (<g1> -^props-agnostic-add <p2> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-start)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name procedure-b)
    -->
    (<g1> ^Gtask <g2> - ^Gtask mean-toxin)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t3046-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name ---_P12_P9_P11_P16
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| ---_P12_P9_P11_P16)
           ^source <p2> ^source <p3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t3000-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1> ^WM <w1>)
    (<o1> ^name elio-index1-plus-index2-add)
    (<r1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<w1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot3 <s5> ^slot2 <s9> ^slot1 add)
}

sp {chunkx2*apply*props*success*action*add*new*t2938-3
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o1> ^name elio-part-mult-index1-finish)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*new*t2938-2
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-part-mult-index1-finish)
    -->
    (<g1> ^clear-rt elio-part-mult-index1-finish)
}

sp {chunkx2*apply*props*success*action*add*replace*t2938-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^props-agnostic-add <p2> ^Gparent <g2> ^Gtask <g3>)
    (<o1> ^name elio-part-mult-index1-finish)
    -->
    (<g1> ^Gtask <g3> - ^Gtask <g2>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2917-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name ---_P37_P38_P46-_P22_P6
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| ---_P37_P38_P46-_P22_P6)
           ^source <p2> ^source <p3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2829-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1> ^WM <w1>)
    (<o1> ^name elio-mineral-div-marine-divide)
    (<r1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<w1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot1 div ^slot3 <s9> ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2809-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1>)
    (<o1> ^name elio-mineral-div-marine-skip)
    (<r1> ^RTid <r2> ^RTid <r3> ^RTid <r4> ^RTid <r5>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^wm-query <w1>)
    (<w1> ^slot1 mineral ^root <r5>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2726-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1> ^WM <w1>)
    (<o1> ^name elio-greater-algae-greater)
    (<r1> ^slot4 <s2> ^slot4 <s3> ^slot4 <s4> ^slot4 <s5>)
    (<w1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot2 <s9> ^slot3 <s5> ^slot1 greater-of)
}

sp {chunkx2*apply*props*success*action*add*new*t2685-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^RT <r1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-greater-algae-read-solid)
    -->
    (<g1> ^clear-rt elio-greater-algae-read-solid)
}

sp {chunkx2*apply*props*success*action*add*new*t2685-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^RT <r1> ^G <g1>)
    (<w1> -^slot2 <s2> -^props-agnostic-add <p3>)
    (<o1> ^name elio-greater-algae-read-solid)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2685-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^RT <r1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-greater-algae-read-solid)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot1 read ^slot2 solid)
}

sp {chunk*apply*props*success*action*indifferent*t2673-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^V <v1> ^G <g1>)
    (<v1> ^slot1 algae)
    (<g1> ^Gtask greater-algae)
    (<r1> ^slot4 <s2>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*greater-algae*read-solid)
    (<o1> ^name elio-greater-algae-read-solid)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t2642-2
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<c1> ^1 <i1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c2> ^prop <p3>)
    (<p3> ^sub1 |_U5| ^id2 <c1> ^attr2 1 ^attr1 name ^sub1-link <s2>
          ^lti-name <l1>)
    (<s2> ^chain-attr operator ^target-arg id1 ^curr-id <c3> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
   -{ (<c3> ^operator <o2>)
      (<o2> ^name <i1>)}
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunkx2*apply*props*sub*chain*iterate*fail*OpNoChange*t2642-1
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<c1> ^1 <i1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c2> ^prop <p3>)
    (<p3> ^sub1 |_U5| ^id2 <c1> ^attr2 1 ^attr1 name ^sub1-link <s2>
          ^lti-name <l1>)
    (<s2> ^chain-attr operator ^target-arg id1 ^curr-id <c3> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
   -{ (<c3> ^operator <o2>)
      (<o2> ^name <i1>)}
    -->
    (<p1> ^original true -)
}

sp {chunkx2*apply*props*success*action*add*new*t2616-5
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^NW <n1> ^operator <o1> ^WM <w2> ^G <g1>)
    (<n1> -^wm <w1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-3)
    (<w2> ^slot2 <s2>)
    -->
    (<n1> ^wm <w3>)
    (<w3> ^WMprev <w2>)
}

sp {chunkx2*apply*props*success*action*add*new*t2616-4
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^NW <n1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-3)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^clear-rt elio-procedure-b-step-3)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2616-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^NW <n1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-procedure-b-step-3)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot1 enter ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*replace*t2616-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^NW <n1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-step-3)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^Gtask <g2> - ^Gtask greater-algae)
}

sp {chunkx2*apply*props*success*action*add*replace*t2616-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^NW <n1> ^G <g1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2> ^slot1 <s3>)
    (<o1> ^name elio-procedure-b-step-3)
    -->
    (<w1> ^slot1 <s3> - ^slot1 mineral)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2574-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P22_P30_P29 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P22_P30_P29)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2548-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name ---_P22_P23_P25-_P24_P26
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>)
           ^name (concat |-| |_P5| ---_P22_P23_P25-_P24_P26) ^source <p2>
           ^source <p3>)
}

sp {chunkx2*apply*props*success*action*add*new*t2481-5
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^NW <n1> ^operator <o1> ^WM <w2> ^G <g1>)
    (<n1> -^wm <w1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-2)
    (<w2> ^slot2 <s2>)
    -->
    (<n1> ^wm <w3>)
    (<w3> ^WMprev <w2>)
}

sp {chunkx2*apply*props*success*action*add*new*t2481-4
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^NW <n1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-2)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^clear-rt elio-procedure-b-step-2)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2481-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^NW <n1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-procedure-b-step-2)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot1 enter ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*replace*t2481-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^NW <n1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-step-2)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^Gtask <g2> - ^Gtask solid-lime-diff)
}

sp {chunkx2*apply*props*success*action*add*replace*t2481-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^NW <n1> ^G <g1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2> ^slot1 <s3>)
    (<o1> ^name elio-procedure-b-step-2)
    -->
    (<w1> ^slot1 <s3> - ^slot1 particulate)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2439-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P22_P34_P41 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P22_P34_P41)
           ^source <p2> ^source <p3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2414-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^V <v1>)
    (<o1> ^name elio-mean-toxin-add)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<v1> ^slot2 <s6> ^slot2 <s7> ^slot2 <s8> ^slot2 <s9>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot3 <s9> ^slot1 add ^slot2 <s5>)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t2385-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U25 ^attr2 3 ^attr1 slot1 ^lti-name _P19 ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr V ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^V <v1>)
    (<v1> ^slot1 <s3>)
    (<i1> ^3 { <i2> <> <s3> })
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2345-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P6_P9-_P7_P8 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P6_P9-_P7_P8)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t2328-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^topstate <t1>)
    (<g1> -^Gtop <g2> ^Gtask procedure-b)
    (<t1> ^io <i1>)
    (<i1> ^input-link <i2>)
    (<i2> ^task-sequence-name procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*start)
    (<o1> ^name elio-procedure-b-start)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2311-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P16 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name --_P12_P9_P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| --_P12_P9_P11 _P16)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2263-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P22_P23_P43 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P22_P23_P43)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t2258-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t2258-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t2258-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <r2>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t2257-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t2218-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U28 ^attr1 rt-result ^lti-name _P21 ^prop-type negation
          ^sub1-link <s2>)
    (<s2> ^chain-attr smem ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^smem <s3>)
    (<s3> ^rt-result <r2>)
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2200-4
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-procedure-b-step-6)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot1 enter ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*new*t2200-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-6)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^clear-rt elio-procedure-b-step-6)
}

sp {chunkx2*apply*props*success*action*add*replace*t2200-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^G <g1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2> ^slot1 <s3>)
    (<o1> ^name elio-procedure-b-step-6)
    -->
    (<w1> ^slot1 <s3> - ^slot1 index2)
}

sp {chunkx2*apply*props*success*action*add*replace*t2200-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-step-6)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^Gtask <g2> - ^Gtask index1-plus-index2)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2179-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P33_P9_P32 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P33_P9_P32)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2153-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P22_P6 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name --_P37_P38_P46 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| --_P37_P38_P46 -_P22_P6)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t2148-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr NW ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t2148-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr NW ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t2148-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr NW ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <w1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t2147-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U83 ^attr2 3 ^prop-type add ^sub1-link <s2> ^attr1 <a1>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<w1> ^<a1> <i5>)
}

sp {chunk*apply*props*success*action*indifferent*t2108-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^smem <s2>)
    (<g1> ^Gtask part-mult-index1)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*part-mult-index1*start)
    (<o1> ^name elio-part-mult-index1-start)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t2098-4
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-procedure-b-step-5)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot1 enter ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*new*t2098-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-5)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^clear-rt elio-procedure-b-step-5)
}

sp {chunkx2*apply*props*success*action*add*replace*t2098-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^G <g1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2> ^slot1 <s3>)
    (<o1> ^name elio-procedure-b-step-5)
    -->
    (<w1> ^slot1 <s3> - ^slot1 index1)
}

sp {chunkx2*apply*props*success*action*add*replace*t2098-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-step-5)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^Gtask <g2> - ^Gtask part-mult-index1)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t2069-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 |_U1| ^attr2 2 ^attr1 Gtask ^lti-name |_P1|
          ^prop-type equality ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^G <g1>)
    (<g1> ^Gtask <g2>)
    (<i1> ^2 { <i2> <> <g2> })
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2050-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P37_P38_P22 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P37_P38_P22)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t2024-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P44_P45 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| -_P44_P45) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t2019-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t2019-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t2019-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <w1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t2018-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U81 ^attr2 2 ^prop-type add ^sub1-link <s2> ^attr1 <a1>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<w1> ^<a1> <i5>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1991-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> ^operator <o1> ^G <g1>)
    (<o1> ^name elio-mineral-div-marine-start)
    (<g1> ^Gtop <g2>)
    (<q1> ^props-agnostic-add <p2>)
    -->
    (<q1> ^retrieve <g2>)
}

sp {chunk*apply*props*success*action*indifferent*t1979-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^smem <s2>)
    (<g1> ^Gtask mineral-div-marine)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mineral-div-marine*start)
    (<o1> ^name elio-mineral-div-marine-start)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1969-4
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^G <g1>)
    (<o1> ^name elio-procedure-b-step-4)
    (<w1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot1 enter ^slot2 <s5>)
}

sp {chunkx2*apply*props*success*action*add*new*t1969-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p3>)
    (<o1> ^name elio-procedure-b-step-4)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^clear-rt elio-procedure-b-step-4)
}

sp {chunkx2*apply*props*success*action*add*replace*t1969-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^G <g1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2> ^slot1 <s3>)
    (<o1> ^name elio-procedure-b-step-4)
    -->
    (<w1> ^slot1 <s3> - ^slot1 marine)
}

sp {chunkx2*apply*props*success*action*add*replace*t1969-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^G <g1> ^operator <o1> ^WM <w1>)
    (<g1> -^props-agnostic-add <p3> ^Gtask <g2>)
    (<o1> ^name elio-procedure-b-step-4)
    (<w1> ^slot2 <s2>)
    -->
    (<g1> ^Gtask <g2> - ^Gtask mineral-div-marine)
}

sp {chunkx2*apply*props*success*action*add*new*t1949-4
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o1> ^name elio-greater-algae-finish)
    -->
    (<w1> ^slot1 greater-algae)
}

sp {chunkx2*apply*props*success*action*add*new*t1949-3
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-greater-algae-finish)
    -->
    (<g1> ^clear-rt elio-greater-algae-finish)
}

sp {chunkx2*apply*props*success*action*add*replace*t1949-2
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^props-agnostic-add <p2> ^Gparent <g2> ^Gtask <g3>)
    (<o1> ^name elio-greater-algae-finish)
    -->
    (<g1> ^Gtask <g3> - ^Gtask <g2>)
}

sp {chunkx2*apply*props*success*action*add*replace*t1949-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot2 <s2>)
    (<o1> ^name elio-greater-algae-finish)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1928-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P22_P30_P23 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P22_P30_P23)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t1911-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^V <v1> ^G <g1>)
    (<r1> ^slot1 div)
    (<v1> ^slot1 solid)
    (<g1> ^Gtask greater-algae)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*greater-algae*greater)
    (<o1> ^name elio-greater-algae-greater)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1901-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^V <v1>)
    (<o1> ^name elio-greater-algae-div-3)
    (<v1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot2 <s5> ^slot3 3 ^slot1 div)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1880-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P11_P18-_P32_P9
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P11_P18-_P32_P9)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1862-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name --_P1_P19_P35 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| --_P1_P19_P35 -_P3_P4)
           ^source <p2> ^source <p3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1847-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^V <v1>)
    (<o1> ^name elio-greater-algae-div-2)
    (<v1> ^slot2 <s2> ^slot2 <s3> ^slot2 <s4> ^slot2 <s5>)
    (<q1> ^props-agnostic-add <p3>)
    -->
    (<q1> ^query <q2>)
    (<q2> ^slot2 <s5> ^slot3 2 ^slot1 div)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t1828-2
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<c1> ^1 <i1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c2> ^prop <p3>)
    (<p3> ^sub1 |_U5| ^id2 <c1> ^attr2 1 ^attr1 name ^sub1-link <s2>
          ^lti-name <l1>)
    (<s2> ^chain-attr operator ^target-arg id1 ^curr-id <c3> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c3> -^props-agnostic-add <p4> ^operator <o3>)
   -{ (<c3> ^operator <o2>)
      (<o2> ^name <i1>)}
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunkx2*apply*props*sub*chain*iterate*fail*OpNoChange*t1828-1
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<c1> ^1 <i1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c2> ^prop <p3>)
    (<p3> ^sub1 |_U5| ^id2 <c1> ^attr2 1 ^attr1 name ^sub1-link <s2>
          ^lti-name <l1>)
    (<s2> ^chain-attr operator ^target-arg id1 ^curr-id <c3> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c3> -^props-agnostic-add <p4> ^operator <o3>)
   -{ (<c3> ^operator <o2>)
      (<o2> ^name <i1>)}
    -->
    (<p1> ^original true -)
}

sp {chunk*apply*props*do*return*status*fail*OpNoChange*t1813-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U22 ^attr1 slot1 ^lti-name _P17 ^prop-type negation
          ^sub1-link <s2>)
    (<s2> ^chain-attr V ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^V <v1>)
    (<v1> ^slot1 <s3>)
    -->
    (<p2> ^status fail)
    (<p1> ^original true -)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1794-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name ---_P12_P13-_P14_P9-_P11_P15
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>)
           ^name (concat |-| |_P5| ---_P12_P13-_P14_P9-_P11_P15) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t1777-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1>)
    (<w1> ^slot1 solid-lime-diff)
    (<g1> ^Gtask procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*step-3)
    (<o1> ^name elio-procedure-b-step-3)
}

sp {chunkx2*apply*props*success*action*add*new*t1767-4
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o1> ^name elio-solid-lime-diff-finish)
    -->
    (<w1> ^slot1 solid-lime-diff)
}

sp {chunkx2*apply*props*success*action*add*new*t1767-3
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-solid-lime-diff-finish)
    -->
    (<g1> ^clear-rt elio-solid-lime-diff-finish)
}

sp {chunkx2*apply*props*success*action*add*replace*t1767-2
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^props-agnostic-add <p2> ^Gparent <g2> ^Gtask <g3>)
    (<o1> ^name elio-solid-lime-diff-finish)
    -->
    (<g1> ^Gtask <g3> - ^Gtask <g2>)
}

sp {chunkx2*apply*props*success*action*add*replace*t1767-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot2 <s2>)
    (<o1> ^name elio-solid-lime-diff-finish)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1746-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P29 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P30 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P30 _P29) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t1728-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^V <v1> ^G <g1>)
    (<r1> ^slot1 subtract)
    (<v1> ^slot1 solid)
    (<g1> ^Gtask solid-lime-diff)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*solid-lime-diff*mult)
    (<o1> ^name elio-solid-lime-diff-mult)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1717-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P24_P26 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name --_P22_P23_P25 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| --_P22_P23_P25 -_P24_P26)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1711-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^4 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1711-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^4 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1711-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^4 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <a1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t1710-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^props-agnostic-add <p2> -^<a2> <a3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U39 ^attr2 4 ^prop-type add ^sub1-link <s2> ^attr1 <a2>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^4 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<a1> ^<a2> <i5>)
}

sp {chunk*apply*props*success*action*indifferent*t1691-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1> ^smem <s2>)
    (<v1> ^slot1 lime2)
    (<g1> ^Gtask solid-lime-diff)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*solid-lime-diff*diff)
    (<o1> ^name elio-solid-lime-diff-diff)
}

sp {chunkx2*apply*props*success*action*add*replace*t1681-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^V <v1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2>)
    (<o1> ^name elio-solid-lime-diff-step-2)
    (<v1> ^slot2 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*new*t1681-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^V <v1>)
    (<w1> -^slot2 <s2> -^props-agnostic-add <p3>)
    (<o1> ^name elio-solid-lime-diff-step-2)
    (<v1> ^slot2 <s3>)
    -->
    (<w1> ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1681-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^V <v1>)
    (<o1> ^name elio-solid-lime-diff-step-2)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 lime2 ^slot1 read)
}

sp {chunk*apply*props*success*action*indifferent*t1669-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1>)
    (<v1> ^slot1 lime4)
    (<g1> ^Gtask solid-lime-diff)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*solid-lime-diff*step-2)
    (<o1> ^name elio-solid-lime-diff-step-2)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1659-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1>)
    (<o1> ^name elio-solid-lime-diff-step-1)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 lime4 ^slot1 read)
}

sp {chunk*apply*props*success*action*indifferent*t1647-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1>)
    (<v1> -^slot1 <s2>)
    (<g1> ^Gtask solid-lime-diff)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*solid-lime-diff*step-1)
    (<o1> ^name elio-solid-lime-diff-step-1)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1636-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P11_P15 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name --_P12_P13-_P14_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| --_P12_P13-_P14_P9 -_P11_P15)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t1618-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1>)
    (<w1> ^slot1 mean-toxin)
    (<g1> ^Gtask procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*step-2)
    (<o1> ^name elio-procedure-b-step-2)
}

sp {chunkx2*apply*props*success*action*add*new*t1608-4
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o1> ^name elio-mean-toxin-finish)
    -->
    (<w1> ^slot1 mean-toxin)
}

sp {chunkx2*apply*props*success*action*add*new*t1608-3
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-mean-toxin-finish)
    -->
    (<g1> ^clear-rt elio-mean-toxin-finish)
}

sp {chunkx2*apply*props*success*action*add*replace*t1608-2
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^props-agnostic-add <p2> ^Gparent <g2> ^Gtask <g3>)
    (<o1> ^name elio-mean-toxin-finish)
    -->
    (<g1> ^Gtask <g3> - ^Gtask <g2>)
}

sp {chunkx2*apply*props*success*action*add*replace*t1608-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot2 <s2>)
    (<o1> ^name elio-mean-toxin-finish)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunk*apply*props*success*action*indifferent*t1596-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 div)
    (<g1> ^Gtask mean-toxin)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mean-toxin*finish)
    (<o1> ^name elio-mean-toxin-finish)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1585-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P41 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P34 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P34 _P41) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t1567-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 add)
    (<g1> ^Gtask mean-toxin)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mean-toxin*divide)
    (<o1> ^name elio-mean-toxin-divide)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1556-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P22_P23_P24 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P22_P23_P24)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t1539-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1> ^smem <s2>)
    (<v1> ^slot1 toxinmin)
    (<g1> ^Gtask mean-toxin)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mean-toxin*add)
    (<o1> ^name elio-mean-toxin-add)
}

sp {chunkx2*apply*props*success*action*add*replace*t1529-3
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^V <v1>)
    (<w1> -^props-agnostic-add <p3> ^slot2 <s2>)
    (<o1> ^name elio-mean-toxin-toxinmin)
    (<v1> ^slot2 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*new*t1529-2
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^WM <w1> ^operator <o1> ^V <v1>)
    (<w1> -^slot2 <s2> -^props-agnostic-add <p3>)
    (<o1> ^name elio-mean-toxin-toxinmin)
    (<v1> ^slot2 <s3>)
    -->
    (<w1> ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1529-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1> ^WM <w1> ^V <v1>)
    (<o1> ^name elio-mean-toxin-toxinmin)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 toxinmin ^slot1 read)
}

sp {chunk*apply*props*success*action*indifferent*t1517-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1>)
    (<v1> ^slot1 toxinmax)
    (<g1> ^Gtask mean-toxin)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mean-toxin*toxinmin)
    (<o1> ^name elio-mean-toxin-toxinmin)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1507-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1>)
    (<o1> ^name elio-mean-toxin-start)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 toxinmax ^slot1 read)
}

sp {chunk*apply*props*success*action*indifferent*t1495-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1>)
    (<v1> -^slot1 <s2>)
    (<g1> ^Gtask mean-toxin)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mean-toxin*start)
    (<o1> ^name elio-mean-toxin-start)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1484-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P7_P8 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P6_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P6_P9 -_P7_P8) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1465-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name -_P1_P2 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| -_P1_P2 -_P3_P4) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1443-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P16 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P12_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P12_P9 _P16) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1443-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P16 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 _P16) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1443-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P11 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P12_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P12_P9 _P11) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1438-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U21 ^attr2 3 ^attr1 Gtask ^lti-name _P16 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t1438-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U21 ^attr2 3 ^attr1 Gtask ^lti-name _P16 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <i1>)
}

sp {chunk*apply*props*success*action*indifferent*t1418-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1>)
    (<w1> ^slot1 index1-plus-index2)
    (<g1> ^Gtask procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*finish)
    (<o1> ^name elio-procedure-b-finish)
}

sp {chunkx2*apply*props*success*action*add*new*t1408-4
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-index1-plus-index2-finish)
    -->
    (<g1> ^clear-rt elio-index1-plus-index2-finish)
}

sp {chunkx2*apply*props*success*action*add*replace*t1408-3
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot1 <s2>)
    (<o1> ^name elio-index1-plus-index2-finish)
    -->
    (<w1> ^slot1 <s2> - ^slot1 index1-plus-index2)
}

sp {chunkx2*apply*props*success*action*add*replace*t1408-2
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^props-agnostic-add <p2> ^Gparent <g2> ^Gtask <g3>)
    (<o1> ^name elio-index1-plus-index2-finish)
    -->
    (<g1> ^Gtask <g3> - ^Gtask <g2>)
}

sp {chunkx2*apply*props*success*action*add*replace*t1408-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot2 <s2>)
    (<o1> ^name elio-index1-plus-index2-finish)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunk*apply*props*success*action*indifferent*t1396-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 add)
    (<g1> ^Gtask index1-plus-index2)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*index1-plus-index2*finish)
    (<o1> ^name elio-index1-plus-index2-finish)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1385-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P43 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P23 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P23 _P43) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1379-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1379-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1379-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c11> ^id2 <r2>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t1379-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot3)}
    (<p4> ^sub2 _U77 ^sub1 _U75 ^attr2 slot2 ^attr1 slot3 ^lti-name _P43
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot3 ^oldattr1 slot3)
    (<e1> ^slot3 <s4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t1377-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U75 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <q1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <q1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <q1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*success*action*indifferent*t1356-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 index1)
    (<g1> ^Gtask index1-plus-index2)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*index1-plus-index2*add)
    (<o1> ^name elio-index1-plus-index2-add)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1346-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> ^operator <o1> ^G <g1>)
    (<o1> ^name elio-index1-plus-index2-start)
    (<g1> ^Gtop <g2>)
    (<q1> ^props-agnostic-add <p2>)
    -->
    (<q1> ^retrieve <g2>)
}

sp {chunk*apply*props*success*action*indifferent*t1334-1
    :chunk
    (state <s1> ^G <g1> -^props-agnostic-add <p1> ^smem <s2>)
    (<g1> ^Gtask index1-plus-index2)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*index1-plus-index2*start)
    (<o1> ^name elio-index1-plus-index2-start)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1323-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name ---_P11_P15-_P12_P9_P13
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| ---_P11_P15-_P12_P9_P13)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t1306-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1>)
    (<w1> ^slot1 part-mult-index1)
    (<g1> ^Gtask procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*step-6)
    (<o1> ^name elio-procedure-b-step-6)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1295-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P32 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P33_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P33_P9 _P32) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t1277-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 mult)
    (<g1> ^Gtask part-mult-index1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*part-mult-index1*finish)
    (<o1> ^name elio-part-mult-index1-finish)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1266-6
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P46 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P37_P38 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P37_P38 _P46) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1266-5
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P46 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P46) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1266-4
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P22 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P37_P38 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P37_P38 _P22) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1266-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P6| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P37_P38 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P37_P38 |_P6|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1266-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P6| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P46 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P46 |_P6|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1266-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P6| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 |_P6|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1260-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1260-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1260-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <r2>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t1259-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1248-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1248-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1248-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c9> ^id2 <i3>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t1248-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot1)}
    (<p4> ^sub1 _U83 ^attr2 3 ^attr1 slot1 ^lti-name _P46 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot1 ^oldattr1 slot1)
    (<e1> ^slot1 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t1246-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U83 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <n1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <n1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <n1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*success*action*indifferent*t1227-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 particulate)
    (<g1> ^Gtask part-mult-index1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*part-mult-index1*mult)
    (<o1> ^name elio-part-mult-index1-mult)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t1217-1
    :chunk
    (state <s1> ^Q <q1> -^props-agnostic-add <p1> ^operator <o1> ^G <g1>)
    (<o1> ^name elio-part-mult-index1-start)
    (<g1> ^Gtop <g2>)
    (<q1> ^props-agnostic-add <p2>)
    -->
    (<q1> ^retrieve <g2>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1204-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name -_P1_P21 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| -_P1_P21 -_P3_P4) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1188-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P13 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name --_P11_P15-_P12_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| --_P11_P15-_P12_P9 _P13)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t1170-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1>)
    (<w1> ^slot1 mineral-div-marine)
    (<g1> ^Gtask procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*step-5)
    (<o1> ^name elio-procedure-b-step-5)
}

sp {chunkx2*apply*props*success*action*add*new*t1160-4
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^clear-rt <c1> -^props-agnostic-add <p2>)
    (<o1> ^name elio-mineral-div-marine-finish)
    -->
    (<g1> ^clear-rt elio-mineral-div-marine-finish)
}

sp {chunkx2*apply*props*success*action*add*replace*t1160-3
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1> ^operator <o1>
          ^WM <w1>)
    (<g1> -^props-agnostic-add <p2> ^Gparent <g2> ^Gtask <g3>)
    (<o1> ^name elio-mineral-div-marine-finish)
    -->
    (<g1> ^Gtask <g3> - ^Gtask <g2>)
}

sp {chunkx2*apply*props*success*action*add*replace*t1160-2
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot2 <s2>)
    (<o1> ^name elio-mineral-div-marine-finish)
    (<r1> ^slot4 <s3>)
    -->
    (<w1> ^slot2 <s2> - ^slot2 <s3>)
}

sp {chunkx2*apply*props*success*action*add*replace*t1160-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^WM <w1> ^operator <o1>
          ^G <g1>)
    (<w1> -^props-agnostic-add <p2> ^slot1 <s2>)
    (<o1> ^name elio-mineral-div-marine-finish)
    -->
    (<w1> ^slot1 <s2> - ^slot1 mineral-div-marine)
}

sp {chunk*apply*props*success*action*indifferent*t1148-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 div)
    (<g1> ^Gtask mineral-div-marine)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mineral-div-marine*finish)
    (<o1> ^name elio-mineral-div-marine-finish)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1137-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P38 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P37 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P37 _P38) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1137-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P38 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P38) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1137-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P37 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P37) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1132-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U64 ^sub1 _U62 ^attr2 slot2 ^attr1 slot3 ^lti-name _P38
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1132-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U64 ^sub1 _U62 ^attr2 slot2 ^attr1 slot3 ^lti-name _P38
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1132-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U64 ^sub1 _U62 ^attr2 slot2 ^attr1 slot3 ^lti-name _P38
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <w1>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t1131-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U64 ^sub1 _U62 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1119-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1119-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1119-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c11> ^id2 <r2>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t1119-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot2)}
    (<p4> ^sub2 _U61 ^sub1 _U59 ^attr2 slot2 ^attr1 slot2 ^lti-name _P37
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^RT <r2>)
    (<r2> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot2 ^oldattr1 slot2)
    (<e1> ^slot2 <s4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t1117-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U59 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <q1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <q1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <q1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*success*action*indifferent*t1096-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 mineral)
    (<g1> ^Gtask mineral-div-marine)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mineral-div-marine*divide)
    (<o1> ^name elio-mineral-div-marine-divide)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1085-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P45 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P44 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P44 _P45) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1080-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^root <r2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U80 ^sub1 _U78 ^attr2 RTid ^attr1 root ^lti-name _P44
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r3>)
    (<r3> ^RTid <r4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1080-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^root <r2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U80 ^sub1 _U78 ^attr2 RTid ^attr1 root ^lti-name _P44
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r3>)
    (<r3> ^RTid <r4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1080-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^root <r2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U80 ^sub1 _U78 ^attr2 RTid ^attr1 root ^lti-name _P44
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r3>)
    (<r3> ^RTid <r4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <w1> ^id2 <r3>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t1079-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm-query <w1>)
    (<w1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U80 ^sub1 _U78 ^attr2 RTid ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^RTid <r3>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<w1> ^<a1> <r3>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1068-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^wm-query <w1>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^2 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t1068-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^wm-query <w1>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^2 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t1068-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^wm-query <w1>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^2 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c9> ^id2 <i3>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t1068-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot1)}
    (<p4> ^sub1 _U81 ^attr2 2 ^attr1 slot1 ^lti-name _P45 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^wm-query <w1>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr wm-query ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^2 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot1 ^oldattr1 slot1)
    (<e1> ^slot1 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t1066-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U81 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <q1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <q1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <q1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*success*action*indifferent*t1048-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 particulate)
    (<g1> ^Gtask mineral-div-marine)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*mineral-div-marine*skip)
    (<o1> ^name elio-mineral-div-marine-skip)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1037-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name _P36 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| _P36) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t1032-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U58 ^sub1 _U57 ^attr2 Gtop ^attr1 retrieve ^lti-name _P36
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr G ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t1032-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U58 ^sub1 _U57 ^attr2 Gtop ^attr1 retrieve ^lti-name _P36
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr G ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <q1> ^id2 <g1>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t1010-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P21 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P1| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P1| _P21) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t993-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P12_P9 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P11_P15 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P11_P15 -_P12_P9)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t993-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P13 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P12_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P12_P9 _P13) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t993-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P13 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P11_P15 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P11_P15 _P13) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t974-1
    :chunk
    (state <s1> ^WM <w1> -^props-agnostic-add <p1> ^G <g1>)
    (<w1> ^slot1 greater-algae)
    (<g1> ^Gtask procedure-b)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*procedure-b*step-4)
    (<o1> ^name elio-procedure-b-step-4)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t963-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P31_P9-_P32_P33
          ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P31_P9-_P32_P33)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t946-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 greater-of)
    (<g1> ^Gtask greater-algae)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*greater-algae*finish)
    (<o1> ^name elio-greater-algae-finish)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t935-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P23 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P30 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P30 _P23) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t916-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name --_P1_P27_P28 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| --_P1_P27_P28 -_P3_P4)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t900-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P22_P34_P29 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P22_P34_P29)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*success*action*indifferent*t883-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1> ^smem <s2>)
    (<v1> ^slot1 solid)
    (<g1> ^Gtask greater-algae)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*greater-algae*div-3)
    (<o1> ^name elio-greater-algae-div-3)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t872-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P32_P9 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P11_P18 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P11_P18 -_P32_P9)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t853-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P35 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P1_P19 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P1_P19 _P35) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t846-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U56 ^attr1 slot4 ^lti-name _P35 ^prop-type existence
          ^sub1-link <s2>)
    (<s2> ^chain-attr RT ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^RT <r2>)
    (<r2> ^slot4 <s3>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t830-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P29 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P34 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P34 _P29) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t812-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1> ^smem <s2>)
    (<v1> ^slot1 algae)
    (<g1> ^Gtask greater-algae)
    (<s2> -^rt-result <r1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*greater-algae*div-2)
    (<o1> ^name elio-greater-algae-div-2)
}

sp {chunkx2*apply*props*success*action*add*agnostic*t802-1
    :chunk
    (state <s1> ^AC <a1> -^props-agnostic-add <p1> -^props-agnostic-add <p2>
          ^operator <o1>)
    (<o1> ^name elio-greater-algae-start)
    (<a1> ^props-agnostic-add <p3>)
    -->
    (<a1> ^action <a2>)
    (<a2> ^slot2 algae ^slot1 read)
}

sp {chunk*apply*props*success*action*indifferent*t790-1
    :chunk
    (state <s1> ^V <v1> -^props-agnostic-add <p1> ^G <g1>)
    (<v1> -^slot1 <s2>)
    (<g1> ^Gtask greater-algae)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*greater-algae*start)
    (<o1> ^name elio-greater-algae-start)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t779-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P14_P9 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P12_P13 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P12_P13 -_P14_P9)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t779-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P14_P9 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P11_P15 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P11_P15 -_P14_P9)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t779-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P12_P13 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P11_P15 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P11_P15 -_P12_P13)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t774-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t774-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t774-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <a1> ^id2 <w1>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t773-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^props-agnostic-add <p2> -^<a2> <a3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a2> ^lti-name <l1>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<a1> ^<a2> <s4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t762-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U12 ^prop-type add ^sub1-link <s2> ^attr2 <a2> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <a1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a3>)
    (<o3> ^id1 <a1> ^new-prop <a3> ^id1new <i2>)
    (<a3> ^id1 <a1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t755-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^WMprev <w2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i4>)
    (<s2> ^chain-attr NW ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^WM <w3>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t755-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^WMprev <w2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i4>)
    (<s2> ^chain-attr NW ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^WM <w3>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t755-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^WMprev <w2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i4>)
    (<s2> ^chain-attr NW ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^WM <w3>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <w1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t754-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^wm <w1>)
    (<w1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U18 ^attr2 WM ^prop-type add ^sub1-link <s2> ^attr1 <a1>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^NW <i2>)
    (<c3> ^NW <i2>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^WM <w2>)
    (<i3> ^<c11> <c12>)
    -->
    (<w1> ^<a1> <w2>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t734-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name -_P1_P10 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| -_P1_P10 -_P3_P4) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t718-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name -_P32_P33 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P31_P9 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P31_P9 -_P32_P33)
           ^source <p2> ^source <p4>)
}

sp {chunk*apply*props*success*action*indifferent*t700-1
    :chunk
    (state <s1> ^RT <r1> -^props-agnostic-add <p1> ^G <g1>)
    (<r1> ^slot1 mult)
    (<g1> ^Gtask solid-lime-diff)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*elio*solid-lime-diff*finish)
    (<o1> ^name elio-solid-lime-diff-finish)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t689-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P30 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P29 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P29 _P30) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t689-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P30 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P30) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t689-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P29 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P29) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t684-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U45 ^sub1 _U43 ^attr2 slot2 ^attr1 slot2 ^lti-name _P29
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t684-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U45 ^sub1 _U43 ^attr2 slot2 ^attr1 slot2 ^lti-name _P29
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t684-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U45 ^sub1 _U43 ^attr2 slot2 ^attr1 slot2 ^lti-name _P29
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <v1>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t683-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U45 ^sub1 _U43 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t672-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U48 ^sub1 _U46 ^attr2 slot4 ^attr1 slot3 ^lti-name _P30
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t672-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U48 ^sub1 _U46 ^attr2 slot4 ^attr1 slot3 ^lti-name _P30
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t672-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U48 ^sub1 _U46 ^attr2 slot4 ^attr1 slot3 ^lti-name _P30
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <r2>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t671-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U48 ^sub1 _U46 ^attr2 slot4 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t647-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P28 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P1_P27 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P1_P27 _P28) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t641-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U42 ^attr2 4 ^attr1 slot1 ^lti-name _P28 ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr V ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^V <v1>)
    (<v1> ^slot1 <s3>)
    (<i1> ^4 <s3>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t624-6
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P26 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P23 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P23 _P26) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t624-5
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P26 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P25 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P25 _P26) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t624-4
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P26 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P24 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P24 _P26) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t624-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P25 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P23 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P23 _P25) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t624-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P25 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P24 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P24 _P25) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t624-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P24 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P22_P23 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P22_P23 _P24) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t619-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U37 ^attr2 3 ^attr1 slot1 ^lti-name _P25 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t619-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U37 ^attr2 3 ^attr1 slot1 ^lti-name _P25 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t619-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U37 ^attr2 3 ^attr1 slot1 ^lti-name _P25 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <a1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t618-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^props-agnostic-add <p2> -^<a2> <a3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U37 ^attr2 3 ^prop-type add ^sub1-link <s2> ^attr1 <a2>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<a1> ^<a2> <i5>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t610-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t610-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t610-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <v1>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t609-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t597-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^4 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t597-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^4 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t597-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^4 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c9> ^id2 <i3>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t597-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot2)}
    (<p4> ^sub1 _U39 ^attr2 4 ^attr1 slot2 ^lti-name _P26 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a2>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a2> ^id1new <i2>)
      (<i2> ^action <a3>)}
    (<c3> ^AC <a2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^4 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot2 ^oldattr1 slot2)
    (<e1> ^slot2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t595-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U39 ^prop-type add ^sub1-link <s2> ^attr2 <a2> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <a1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a3>)
    (<o3> ^id1 <a1> ^new-prop <a3> ^id1new <i2>)
    (<a3> ^id1 <a1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t576-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name --_P1_P19_P21 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| --_P1_P19_P21 -_P3_P4)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t560-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name --_P11_P18_P20 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| --_P11_P18_P20)
           ^source <p2> ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t542-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name -_P1_P19 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| -_P1_P19 -_P3_P4) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t526-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P11_P18 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name |_P5| ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| |_P5| -_P11_P18) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t508-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name -_P1_P17 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| -_P1_P17 -_P3_P4) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-15
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P14 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P13 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P13 _P14) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-14
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P14 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P12 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P12 _P14) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-13
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P14 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 _P14) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-12
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P15 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P14 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P14 _P15) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-11
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P15 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P13 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P13 _P15) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-10
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P15 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P12 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P12 _P15) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-9
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P15 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 _P15) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-8
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P13 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P12 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P12 _P13) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-7
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P13 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 _P13) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-6
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P14 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P14 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-5
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P15 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P15 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-4
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P13 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P13 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P12 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P12 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t492-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P12 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 _P12) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t487-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U17 ^attr2 3 ^attr1 slot1 ^lti-name _P13 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t487-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U17 ^attr2 3 ^attr1 slot1 ^lti-name _P13 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <w1> ^id2 <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t479-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^WM <w2>)
    (<i1> ^<c7> <c9>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t479-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^WM <w2>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t479-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^WM <w2>)
    (<i1> ^<c7> <c9>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c9> ^id2 <i3>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t479-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 WMprev)}
    (<p4> ^sub1 _U18 ^attr2 WM ^attr1 WMprev ^lti-name _P14 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <n1> ^id1new <i2>)
      (<i2> ^wm <w1>)}
    (<c3> ^NW <n1>)
    (<c4> ^chain-next done ^chain-attr wm ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^WM <w2>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 WMprev ^oldattr1 WMprev)
    (<e1> ^WMprev <w2>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t477-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U18 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr NW ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^NW <n1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <n1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <n1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <n1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t469-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c9>)
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t469-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c9>)
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t469-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c9>)
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c11> ^id2 <w1>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t469-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot2)}
    (<p4> ^sub2 _U16 ^sub1 _U14 ^attr2 slot2 ^attr1 slot2 ^lti-name _P12
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a2>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a2> ^id1new <i2>)
      (<i2> ^action <a3>)}
    (<c3> ^AC <a2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c9>)
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot2 ^oldattr1 slot2)
    (<e1> ^slot2 <s4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t467-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U14 ^prop-type add ^sub1-link <s2> ^attr2 <a2> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <a1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a3>)
    (<o3> ^id1 <a1> ^new-prop <a3> ^id1new <i2>)
    (<a3> ^id1 <a1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t457-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U20 ^attr2 4 ^attr1 Gtask ^lti-name _P15 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t457-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U20 ^attr2 4 ^attr1 Gtask ^lti-name _P15 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <i1>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t438-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P10 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P1| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P1| _P10) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t431-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U11 ^attr2 3 ^attr1 slot1 ^lti-name _P10 ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^WM <w1>)
    (<w1> ^slot1 <s3>)
    (<i1> ^3 <s3>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t415-6
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P33 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P32 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P32 _P33) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t415-5
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P33 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P31 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P31 _P33) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t415-4
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P32 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P31 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P31 _P32) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t415-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P33 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P33 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t415-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P32 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P32 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t415-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P31 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P31 |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t410-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U49 ^attr2 2 ^attr1 slot1 ^lti-name _P31 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t410-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U49 ^attr2 2 ^attr1 slot1 ^lti-name _P31 ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <w1> ^id2 <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t403-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U51 ^sub1 _U50 ^attr2 slot4 ^attr1 slot2 ^lti-name _P32
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    (<c3> ^RT <r2>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t403-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U51 ^sub1 _U50 ^attr2 slot4 ^attr1 slot2 ^lti-name _P32
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    (<c3> ^RT <r2>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <w1> ^id2 <r2>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t393-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U53 ^sub1 _U52 ^attr2 Gparent ^attr1 Gtask ^lti-name _P33
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr G ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    (<c3> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t393-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U53 ^sub1 _U52 ^attr2 Gparent ^attr1 Gtask ^lti-name _P33
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr G ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    (<c3> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <g1>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t370-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^act-count <a1> ^cond-count <c1> ^propose <p2> ^propose <p3>)
    (<p2> -^original true ^size <a1> ^name -_P3_P4 ^prop-type action)
    (<p3> -^original true ^size <c1> ^name -_P1_P27 ^prop-type condition)
    -->
    (<p1> ^propose <p4>)
    (<p4> ^size (+ <c1> <a1>) ^name (concat |-| -_P1_P27 -_P3_P4) ^source <p2>
           ^source <p3>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t354-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P41 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P34 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P34 _P41) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t354-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P41 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P41) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t354-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P34 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P34) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t349-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U54 ^attr2 3 ^attr1 slot3 ^lti-name _P34 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t349-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U54 ^attr2 3 ^attr1 slot3 ^lti-name _P34 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t349-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot3 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U54 ^attr2 3 ^attr1 slot3 ^lti-name _P34 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t348-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U54 ^attr2 3 ^prop-type add ^sub1-link <s2> ^attr1 <a1>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<q1> ^<a1> <i5>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t340-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U72 ^sub1 _U70 ^attr2 slot4 ^attr1 slot2 ^lti-name _P41
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t340-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U72 ^sub1 _U70 ^attr2 slot4 ^attr1 slot2 ^lti-name _P41
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t340-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U72 ^sub1 _U70 ^attr2 slot4 ^attr1 slot2 ^lti-name _P41
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <r2>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t339-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U72 ^sub1 _U70 ^attr2 slot4 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr RT ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^RT <r2>)
    (<r2> ^slot4 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t328-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U29 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <q1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <q1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <q1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t309-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P27 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P1| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P1| _P27) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t303-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U41 ^attr2 3 ^attr1 slot1 ^lti-name _P27 ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr RT ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^RT <r2>)
    (<r2> ^slot1 <s3>)
    (<i1> ^3 <s3>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t286-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P24 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P23 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P23 _P24) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t286-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P24 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P24) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t286-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P23 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P22 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P22 _P23) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t281-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U29 ^attr2 2 ^attr1 slot1 ^lti-name _P22 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t281-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U29 ^attr2 2 ^attr1 slot1 ^lti-name _P22 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t281-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U29 ^attr2 2 ^attr1 slot1 ^lti-name _P22 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t280-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U29 ^attr2 2 ^prop-type add ^sub1-link <s2> ^attr1 <a1>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<q1> ^<a1> <i5>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t272-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U33 ^sub1 _U31 ^attr2 slot2 ^attr1 slot2 ^lti-name _P23
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t272-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U33 ^sub1 _U31 ^attr2 slot2 ^attr1 slot2 ^lti-name _P23
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t272-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U33 ^sub1 _U31 ^attr2 slot2 ^attr1 slot2 ^lti-name _P23
          ^prop-type add ^sub2-link <s3> ^sub1-link <s4>)
    (<s3> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s4> ^chain-attr Q ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c7> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s5>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <q1> ^id2 <w1>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t271-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<i1> ^query <q1>)
    (<q1> -^props-agnostic-add <p2> -^<a1> <a2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub2 _U33 ^sub1 _U31 ^attr2 slot2 ^prop-type add ^sub2-link <s2>
          ^sub1-link <s3> ^attr1 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr WM ^target-arg id2 ^curr-id <c5> ^chain-next <c10>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c7> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^Q <i2>)
    (<c3> ^Q <i2>)
    (<c4> ^chain-next done ^chain-attr query ^chain-next <c6>
          ^chain-attr { <c11> <> props$const })
    (<c5> ^WM <w1>)
    (<w1> ^slot2 <s4>)
    (<c7> ^chain-next <c8> ^chain-next <c9>
          ^chain-attr { <c12> <> props$const }
          ^chain-attr { <c13> <> props$const })
    (<i3> ^<c13> <c14>)
    -->
    (<q1> ^<a1> <s4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t260-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t260-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t260-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c11> ^id2 <v1>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t260-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot3)}
    (<p4> ^sub2 _U36 ^sub1 _U34 ^attr2 slot2 ^attr1 slot3 ^lti-name _P24
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c5> ^chain-next <c8>
          ^target-attr <t3> ^depth { <d3> <= 2 })
    (<s3> ^chain-attr Q ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t4> ^target-arg <t5> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <q1> ^id1new <i2>)
      (<i2> ^query <q2>)}
    (<c3> ^Q <q1>)
    (<c4> ^chain-next done ^chain-attr query ^chain-attr <c9>)
    (<c5> ^V <v1>)
    (<v1> ^slot2 <s4>)
    (<c6> ^chain-next <c7> ^chain-attr { <c10> <> props$const })
    (<i1> ^<c9> <c11>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot3 ^oldattr1 slot3)
    (<e1> ^slot3 <s4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t258-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U34 ^prop-type add ^sub1-link <s2> ^attr2 <a1> ^lti-name <l1>)
    (<s2> ^chain-attr Q ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^Q <q1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <q1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a2>)
    (<o3> ^id1 <q1> ^new-prop <a2> ^id1new <i2>)
    (<a2> ^id1 <q1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t236-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P21 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P1_P19 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P1_P19 _P21) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t229-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U28 ^attr1 rt-result ^lti-name _P21 ^prop-type negation
          ^sub1-link <s2>)
    (<s2> ^chain-attr smem ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^smem <s3>)
    (<s3> -^rt-result <r2>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t213-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P20 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name -_P11_P18 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| -_P11_P18 _P20) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t208-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t208-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t208-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot2 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <a1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t207-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^props-agnostic-add <p2> -^<a2> <a3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U23 ^attr2 3 ^prop-type add ^sub1-link <s2> ^attr1 <a2>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^3 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<a1> ^<a2> <i5>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t199-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U27 ^sub1 _U26 ^attr2 slot2 ^attr1 slot2 ^lti-name _P20
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    (<c3> ^V <v1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t199-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 _U27 ^sub1 _U26 ^attr2 slot2 ^attr1 slot2 ^lti-name _P20
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr V ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr WM ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^WM <w1>)
    (<c3> ^V <v1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <w1> ^id2 <v1>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t177-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P19 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P1| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P1| _P19) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t171-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U25 ^attr2 3 ^attr1 slot1 ^lti-name _P19 ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr V ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^V <v1>)
    (<v1> ^slot1 <s3>)
    (<i1> ^3 <s3>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t154-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P18 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name _P11 ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| _P11 _P18) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t149-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U12 ^attr2 2 ^attr1 slot1 ^lti-name _P11 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p4> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t149-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U12 ^attr2 2 ^attr1 slot1 ^lti-name _P11 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p5> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t149-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^slot1 <s2> -^props-agnostic-add <p2>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U12 ^attr2 2 ^attr1 slot1 ^lti-name _P11 ^prop-type add
          ^sub1-link <s3> ^id2 <i4>)
    (<s3> ^chain-attr AC ^target-arg id1 ^curr-id <c2> ^curr-id <c3>
          ^chain-next <c4> ^chain-next <c6> ^target-attr <t1>
          ^target-attr <t2> ^target-arg <t3> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<p1> ^action <p5>)
    (<p5> ^id1 <a1> ^id2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*create*OpNoChange*t148-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p1> ^object <o2> ^object <o3>)
    (<o2> ^id1new <i1> ^id1 <i2>)
    (<o3> ^id1 <i2> ^id1new <i3>)
    (<i1> ^action <a1>)
    (<a1> -^props-agnostic-add <p2> -^<a2> <a3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^sub1 _U12 ^attr2 2 ^prop-type add ^sub1-link <s2> ^attr1 <a2>
          ^id2 <i4> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c6> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p6> ^AC <i2>)
    (<c3> ^AC <i2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-next <c5>
          ^chain-attr { <c9> <> props$const })
    (<c6> ^chain-next <c7> ^chain-next <c8>
          ^chain-attr { <c10> <> props$const }
          ^chain-attr { <c11> <> props$const })
    (<i4> ^2 <i5>)
    (<i3> ^<c11> <c12>)
    -->
    (<a1> ^<a2> <i5>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t140-4
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*buff-chain*copy*intermediate-flag*OpNoChange*t140-3
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^intermediate true)
}

sp {chunk*apply*props*do*add*OpNoChange*t140-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a1> ^id1new <i2>)
      (<i2> ^action <a2>)}
    (<c3> ^AC <a1>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <c9> ^id2 <i3>)
}

sp {chunk*apply*props*do*buff-chain*copy*OpNoChange*t140-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p1> ^object <o2>)
    (<o2> ^id1new <i1>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
   -{ (<p1> ^action { <a1> <> <p4> })
      (<a1> ^buff-attr2 slot2)}
    (<p4> ^sub1 _U23 ^attr2 3 ^attr1 slot2 ^lti-name _P18 ^prop-type add
          ^sub1-link <s2> ^id2 <i3>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^curr-id <c3> ^chain-next <c4>
          ^chain-next <c5> ^target-attr <t1> ^target-attr <t2>
          ^target-arg <t3> ^target-arg <t4> ^depth { <d1> <= 2 }
          ^depth { <d2> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a2>)
   -{ (<p1> ^object <o3>)
      (<o3> ^id1 <a2> ^id1new <i2>)
      (<i2> ^action <a3>)}
    (<c3> ^AC <a2>)
    (<c4> ^chain-next done ^chain-attr action ^chain-attr <c7>)
    (<c5> ^chain-next <c6> ^chain-attr { <c8> <> props$const })
    (<i3> ^3 <i4>)
    (<i1> ^<c7> <c9>)
    -->
    (<p4> ^end-id1 <e1> ^buff-id2 <e1> ^buff-attr2 slot2 ^oldattr1 slot2)
    (<e1> ^slot2 <i4>)
}

sp {chunkx2*apply*props*sub*chain*iterate*buff*OpNoChange*t138-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U23 ^prop-type add ^sub1-link <s2> ^attr2 <a2> ^lti-name <l1>)
    (<s2> ^chain-attr AC ^curr-id <c2> ^chain-next <c3> ^target-attr <t1>
          ^target-arg <t2> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^AC <a1>)
    (<c3> ^chain-attr { <c4> <> props$const } ^chain-next <c6>)
   -{ (<p1> ^object <o2>)
      (<o2> ^id1 <a1> ^id1new <i1>)
      (<i1> ^<c4> <c5>)}
    -->
    (<p1> ^object <o3> ^action <a3>)
    (<o3> ^id1 <a1> ^new-prop <a3> ^id1new <i2>)
    (<a3> ^id1 <a1> ^attr1 <c4> ^id2 <i2> ^attr2 <c4> ^prop-type action
           ^prop-type add ^lti-name (make-constant-symbol |!|))
    (<i2> ^<c4> <c7>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t119-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name _P17 ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P1| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P1| _P17) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t112-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 _U22 ^attr1 slot1 ^lti-name _P17 ^prop-type negation
          ^sub1-link <s2>)
    (<s2> ^chain-attr V ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^V <v1>)
    (<v1> -^slot1 <s3>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t96-6
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P8| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P7| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P7| |_P8|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t96-5
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P8| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P6| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P6| |_P8|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t96-4
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P7| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P6| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P6| |_P7|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t96-3
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P8| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P8| |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t96-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P7| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P7| |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t96-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P9| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P6| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P6| |_P9|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t91-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 |_U8| ^sub1 |_U7| ^attr2 Gtask ^attr1 Gparent ^lti-name |_P7|
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr G ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    (<c3> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t91-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub2 |_U8| ^sub1 |_U7| ^attr2 Gtask ^attr1 Gparent ^lti-name |_P7|
          ^prop-type add ^sub2-link <s2> ^sub1-link <s3>)
    (<s2> ^chain-attr G ^target-arg id2 ^curr-id <c3> ^chain-next <c5>
          ^target-attr <t2> ^depth { <d2> <= 2 })
    (<s3> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c4>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    (<c3> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <g1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t81-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 |_U6| ^attr2 WM ^attr1 Gtop ^lti-name |_P6| ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t81-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 |_U6| ^attr2 WM ^attr1 Gtop ^lti-name |_P6| ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t74-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U10 ^attr2 1 ^attr1 clear-rt ^lti-name |_P9| ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t74-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 _U10 ^attr2 1 ^attr1 clear-rt ^lti-name |_P9| ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t67-2
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 |_U9| ^attr2 2 ^attr1 Gtask ^lti-name |_P8| ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*add*OpNoChange*t67-1
    :chunk
    (state <s1> ^operator <o1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c1> ^prop <p4>)
    (<p4> ^sub1 |_U9| ^attr2 2 ^attr1 Gtask ^lti-name |_P8| ^prop-type add
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p5> ^G <g1>)
    -->
    (<p1> ^action <p4>)
    (<p4> ^id1 <g1> ^id2 <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t60-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 |_U5| ^attr2 1 ^attr1 name ^lti-name |_P5| ^prop-type equality
          ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr operator ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^operator <o2>)
    (<i1> ^1 <i2>)
    (<o2> ^name <i2>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t42-2
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P2| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P1| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P1| |_P2|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*build-proposals*return*OpNoChange*t42-1
    :chunk
    (state <s1> ^name props-eval ^operator <o1> ^proposals <p1>)
    (<o1> -^name props-reset)
    (<p1> ^propose <p2> ^propose <p4>)
    (<p2> -^original true ^name |_P4| ^size <s2> ^prop-type <p3>)
    (<p4> -^original true ^name |_P3| ^prop-type <p3> ^size <s3>)
    -->
    (<p1> ^propose <p5>)
    (<p5> ^size (+ <s3> <s2>) ^name (concat |-| |_P3| |_P4|) ^source <p2>
           ^source <p4>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t37-2
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<c1> ^1 <i1> ^1 <i2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c2> ^prop <p4>)
    (<p4> ^sub1 |_U4| ^attr1 1 ^lti-name |_P4| ^prop-type proposal
          ^prop-type indifferent ^sub1-link <s2>)
    (<s2> ^chain-next done ^chain-attr props$const ^target-arg id1
          ^curr-id <c3> ^curr-id <c4> ^target-attr <t1> ^target-attr <t2>
          ^depth { <d1> <= 2 } ^depth { <d2> <= 2 })
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*indifferent*OpNoChange*t37-1
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<c1> ^1 <i1> ^1 <i2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c2> ^prop <p4>)
    (<p4> ^sub1 |_U4| ^attr1 1 ^lti-name |_P4| ^prop-type proposal
          ^prop-type indifferent ^sub1-link <s2>)
    (<s2> ^chain-next done ^chain-attr props$const ^target-arg id1
          ^curr-id <c3> ^curr-id <c4> ^target-attr <t1> ^target-attr <t2>
          ^depth { <d1> <= 2 } ^depth { <d2> <= 2 })
    -->
    (<p1> ^action <p4>)
    (<p4> ^ops <o2> ^id1 <c4> ^prop-type indifferent)
    (<o2> ^op-target attr1 ^op <o3>)
    (<o3> ^name <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t30-2
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<c1> ^1 <i1> ^1 <i2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c2> ^prop <p4>)
    (<p4> ^sub1 |_U3| ^attr1 1 ^lti-name |_P3| ^prop-type proposal
          ^prop-type acceptable ^sub1-link <s2>)
    (<s2> ^chain-next done ^chain-attr props$const ^target-arg id1
          ^curr-id <c3> ^curr-id <c4> ^target-attr <t1> ^target-attr <t2>
          ^depth { <d1> <= 2 } ^depth { <d2> <= 2 })
    -->
    (<p3> ^status success)
}

sp {chunk*apply*props*do*acceptable*OpNoChange*t30-1
    :chunk
    (state <s1> ^operator <o1> ^const <c1> ^props-buffer <p1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p2>)
    (<c1> ^1 <i1> ^1 <i2>)
    (<p2> ^prop-eval-data <p3>)
    (<p3> -^counted <c2> ^prop <p4>)
    (<p4> ^sub1 |_U3| ^attr1 1 ^lti-name |_P3| ^prop-type proposal
          ^prop-type acceptable ^sub1-link <s2>)
    (<s2> ^chain-next done ^chain-attr props$const ^target-arg id1
          ^curr-id <c3> ^curr-id <c4> ^target-attr <t1> ^target-attr <t2>
          ^depth { <d1> <= 2 } ^depth { <d2> <= 2 })
    -->
    (<p1> ^action <p4>)
    (<p4> ^ops <o2> ^id1 <c4>)
    (<o2> ^op-target attr1 ^op <o3>)
    (<o3> ^name <i1>)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t23-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 |_U1| ^attr2 2 ^attr1 Gtask ^lti-name |_P1|
          ^prop-type equality ^sub1-link <s2> ^id2 <i1>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^G <g1>)
    (<g1> ^Gtask <g2>)
    (<i1> ^2 <g2>)
    -->
    (<p2> ^status success)
}

sp {chunk*apply*props*do*return*status*success*OpNoChange*t16-3
    :chunk
    (state <s1> ^operator <o1>)
   -{ (<o1> ^propose <p1>)
      (<p1> ^prop-eval-data <p2>)
      (<p2> -^status success)}
    (<o1> ^name props-evaluate ^propose <p3>)
    (<p3> ^prop-eval-data <p4>)
    (<p4> -^counted <c1> ^prop <p5>)
    (<p5> ^lti-name <l1>)
    -->
    (<p3> ^original true -)
}

sp {chunk*apply*props*do*return*status*count-delay*OpNoChange*t16-2
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^status success ^prop <p3>)
    (<p3> ^lti-name <l1>)
    -->
    (<p2> ^count-delayed true)
}

sp {chunk*apply*props*do*return*status*OpNoChange*t16-1
    :chunk
    (state <s1> ^operator <o1> ^rootstate <r1>)
    (<o1> ^name props-evaluate ^propose <p1>)
    (<p1> ^prop-eval-data <p2>)
    (<p2> -^counted <c1> ^prop <p3>)
    (<p3> ^sub1 |_U2| ^attr1 Gtop ^lti-name |_P2| ^prop-type negation
          ^sub1-link <s2>)
    (<s2> ^chain-attr G ^target-arg id1 ^curr-id <c2> ^chain-next <c3>
          ^target-attr <t1> ^depth { <d1> <= 2 })
    (<c2> -^props-agnostic-add <p4> ^G <g1>)
    (<g1> -^Gtop <g2>)
    -->
    (<p2> ^status success)
}
