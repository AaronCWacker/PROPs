package edu.umich.eecs.soar.props.elio;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import sml.Identifier;
import sml.Kernel;
import sml.Kernel.UpdateEventInterface;
import sml.WMElement;
import sml.smlUpdateEventId;
import sml.Agent;
import sml.Agent.OutputEventInterface;
//import sml.Agent.RunEventInterface;
//import sml.smlRunEventId;

public class ElioWorld implements UpdateEventInterface/*, OutputEventInterface*/ {

	private static final String PROJ_DIR = "/Users/Bryan/Dropbox/UM_misc/Soar/Research/PROPs/PRIMs_Duplications/Elio/";  
	//private static final String PROJ_DIR = "/home/bryan/Dropbox/UM_misc/Soar/Research/PROPs/PRIMs_Duplications/Elio/";
	
	private static final String PROPS_DIR = "/Users/Bryan/Dropbox/UM_misc/Soar/Research/PROPs/PROPs Project/"; 
	//private static final String PROPS_DIR = "/home/bryan/Dropbox/UM_misc/Soar/Research/PROPs/PROPs Project/";
	
	final protected String CMD_SAY = "say",
							CMD_FINISH = "finish",
							CMD_INSTR_NEXT = "props-command";
	final String TEMP_AGENT_FILENAME = "ElioTempSavedAgent";
	protected String outFileName = "elio_props.dat";
	private Identifier input_link,
						output_link;
	private Kernel kernel;
	private Agent agent;
	private WMElement in1, 
					  in2,
					  inTask;
					  //inManual;

	private ETask etask;
	private List<Result> results;
	
	
	// We'll use the same numbers on the screen over and over again. The model will not notice.
	private static final Map<String, Integer> inputs;
	static {
		Map<String, Integer> aMap = new HashMap<String, Integer>();
		aMap.put("solid", 6);
		aMap.put("algae", 2);
		aMap.put("lime1", 3);
		aMap.put("lime2", 5);
		aMap.put("lime3", 1);
		aMap.put("lime4", 9);
		aMap.put("limemax", 2);
		aMap.put("limemin", 1);
		aMap.put("toxin1", 4);
		aMap.put("toxin2", 8);
		aMap.put("toxin3", 7);
		aMap.put("toxin4", 2);
		aMap.put("toxinmin", 2);
		aMap.put("toxinmax", 8);
		inputs = Collections.unmodifiableMap(aMap);
	}

	
	ElioWorld(Kernel kernel, Agent agent) {
		this.kernel = kernel;
		this.agent = agent;
		
		input_link = this.agent.GetInputLink();
		output_link = this.agent.GetOutputLink();
		in1 = null;
		in2 = null;
		inTask = null;
		//inManual = null;
		
		etask = new ETask(1,1);
		results = new ArrayList<Result>();
		

		this.kernel.RegisterForUpdateEvent(smlUpdateEventId.smlEVENT_AFTER_ALL_OUTPUT_PHASES, this, this);
		//this.agent.AddOutputHandler(CMD_SAY, this, null);
		
		// Load the agent files
		this.agent.LoadProductions(PROPS_DIR + "load_config_props.soar");			// props library
		this.agent.LoadProductions(PROJ_DIR + "prims_elio01_agent_smem.soar");		// elio props instructions
		
		//this.agent.LoadProductions(PROJ_DIR + "prims_elio01_agent.soar");			// elio agent to be learned (for testing)
		
		
		this.agent.LoadProductions(PROJ_DIR + "lib_actr_interface.soar");			// actr memory interface
		this.agent.LoadProductions(PROJ_DIR + "smem_elio.soar");					// smem memory used by elio agent
		
		//this.agent.LoadProductions(PROJ_DIR + TEMP_AGENT_FILENAME + ".soar");
	}
	
	
	public void setOutputFile(String filename) {
		outFileName = filename;
	}
	
	public void initTask(String task) {
		// Clear input if any
		if (in1 != null)
			in1.DestroyWME();
		if (in2 != null)
			in2.DestroyWME();
		if (inTask != null)
			inTask.DestroyWME();
		
		// Clear results
		results.clear();
		// Init task
		etask.init();
		inTask = input_link.CreateStringWME("task", task);
		agent.Commit();
	}
	
	public void initManualSequence(String task) {
		String s = task.toLowerCase();
		if (s.compareTo("procedure-a") == 0) {
			agent.LoadProductions(PROJ_DIR + "prims_elio_procedureA_smem.soar");
		}
		else if (s.compareTo("procedure-b") == 0) {
			agent.LoadProductions(PROJ_DIR + "prims_elio_procedureB_smem.soar");
		}
		else if (s.compareTo("procedure-c") == 0) {
			agent.LoadProductions(PROJ_DIR + "prims_elio_procedureC_smem.soar");
		}
		else if (s.compareTo("procedure-d") == 0) {
			agent.LoadProductions(PROJ_DIR + "prims_elio_procedureD_smem.soar");
		}
	}
	
	public void runTest(int trials, int steps) {
		outFileName = "elio_props_test.dat";
		clearOutputFile();
		initTask("procedure-a");
		initManualSequence("procedure-a");
		for (int i=0; i<trials; ++i) {
			if (steps <= 0)
				agent.RunSelfForever();		// until receiving the finish command
			else {
				agent.RunSelf(steps);
				agent.ExecuteCommandLine("watch 5");
				agent.ExecuteCommandLine("watch --learn 2");
				agent.ExecuteCommandLine("e");
				agent.ExecuteCommandLine("memories -c 15");
				agent.ExecuteCommandLine("watch --learn 0");
				agent.ExecuteCommandLine("watch 1");
				agent.ExecuteCommandLine("step 2");
			}
			
			agent.InitSoar();
			initManualSequence("procedure-a");
			
			// Reset for next trial
			etask.line = 1;
			etask.trial++;
			etask.start = System.nanoTime();
		}
		printResults("procedure-a");
	}
	
	public void runDebug() {
		initTask("procedure-a");
		
		InputStreamReader r=new InputStreamReader(System.in);  
		BufferedReader br=new BufferedReader(r);
		boolean exit = false;
		
		try {
			while (!exit) {
				String input = br.readLine();
				agent.ExecuteCommandLine(input);
				//System.console().notify();
				if (input.compareTo("exit") == 0) {
					exit = true;
				}
			} 
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public void doExperiment(int n) {
		for (int i=0; i<n; ++i) {
			doElio();
		}
	}
	
	public void doElio() {
		
		List<String> tasks = new ArrayList<>(Arrays.asList("procedure-b", "procedure-c", "procedure-d"));
		
		// Alternate 50 trials of procedure-A with 50 trials of one of the others
		final int NUM_TRIALS = 50;
		for (String task : tasks) {
			
			initTask("procedure-a");
			initManualSequence("procedure-a");
			for (int i=0; i<NUM_TRIALS; ++i) {
				//agent.RunSelf(200);
				agent.RunSelfForever();	// Run until receiving the finish command
				
				agent.InitSoar();
				initManualSequence("procedure-a");
				
				// Reset for next trial
				etask.line = 1;
				etask.trial++;
				etask.start = System.nanoTime();
			}
			printResults("procedure-a");
			
			initTask(task);
			initManualSequence(task);
			for (int i=0; i<NUM_TRIALS; ++i) {
				//agent.RunSelf(100);
				agent.RunSelfForever();	// Run until receiving the finish command

				agent.InitSoar();
				initManualSequence(task);
				
				// Reset for next trial
				etask.line = 1;
				etask.trial++;
				etask.start = System.nanoTime();
			}
			printResults(task.toUpperCase());
		}
		
	}

	// Clear the output file if it already exists
	public boolean clearOutputFile() {
		try {
			PrintWriter writer;
			writer = new PrintWriter(outFileName);
			writer.print("");
			writer.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	private void printResults(String task) {
		try(FileWriter fw = new FileWriter(outFileName, true);
				BufferedWriter bw = new BufferedWriter(fw);
				PrintWriter out = new PrintWriter(bw))
		{
			for (Result r : results) {
				out.println(task + "\t" + r.toString());
			}
		}
		catch (IOException e) {
			System.err.println("ERROR: Unable to append to file '" + outFileName + "'");
		}
	}
	
	@Override
	public void updateEventHandler(int arg0, Object data, Kernel kernel, int arg3) {
		
		int C = agent.GetNumberCommands();
		if (C <= 0) {
			return;
		}
		
		// Clear old input
		if (in1 != null) {
			in1.DestroyWME();
			in1 = null;
		}
		if (in2 != null) {
			in2.DestroyWME();
			in2 = null;
		}
		
		boolean stopAgent = false;
		for (int c = 0; c < C; ++c) {
			final Identifier id = agent.GetCommand(c);

			if (id != null) {

				int nChildren = id.GetNumberChildren();
				
				/*if (id.GetCommandName().compareTo(CMD_INSTR_NEXT) == 0 && manualRuleInd < ruleSequence.size()) {
					if (inManual != null) {
						inManual.DestroyWME();
						inManual = null;
					}
					
					String ruleName = ruleSequence.get(manualRuleInd++);
					inManual = input_link.CreateStringWME("props-manual-next-rule", ruleName);
				}
				// Handle Elio commands
				else */if (id.GetCommandName().compareTo(CMD_SAY) == 0 && nChildren == 2) {
					// Get the output
					String val1 = id.GetParameterValue("out1");
					String val2 = id.GetParameterValue("out2");

					// Generate the corresponding input
					int input2;
					if (val1.compareTo("read") == 0) {
						// TODO: Latency for min/max?
						input2 = inputs.get(val2);
						in1 = input_link.CreateStringWME("in1", val2);
						in2 = input_link.CreateIntWME("in2", input2);
					}
					else if (val1.compareTo("enter") == 0) {
						// Inputs already destroyed, leave it that way
						// Store the result
						results.add(new Result(etask, val2));
						// Start next task
						etask.line++;
						etask.start = System.nanoTime();
						System.out.println("# Enter " + val2 + " #");
					}

					id.AddStatusComplete();

					//System.out.println(val1 + " " + val2);
				}
				else if (id.GetCommandName().compareTo(CMD_FINISH) == 0) {
					stopAgent = true;
				}
				else {
					id.AddStatusError();
				}

				agent.Commit();
			}
		}

		if (stopAgent) {
			agent.StopSelf();
			agent.InitSoar();
		}

	}

	/*@Override
	public void runEventHandler(int eventID, Object data, Agent agent, int phase) {
		// TODO Auto-generated method stub

	}*/

}
